{"version":3,"sources":["webpack://@fof/linguist/webpack/bootstrap","webpack://@fof/linguist/external \"flarum.core.compat['app']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/Button']\"","webpack://@fof/linguist/external \"flarum.core.compat['Model']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/Select']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/Switch']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/Dropdown']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/ExtensionPage']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/Alert']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/LoadingModal']\"","webpack://@fof/linguist/external \"flarum.core.compat['utils/ItemList']\"","webpack://@fof/linguist/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/linguist/external \"flarum.core.compat['components/LinkButton']\"","webpack://@fof/linguist/external \"flarum.core.compat['utils/extractText']\"","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@fof/linguist/./src/admin/models/StringKey.js","webpack://@fof/linguist/./src/admin/models/TextString.js","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/linguist/./src/admin/utils/localesAsArray.js","webpack://@fof/linguist/./src/admin/utils/highlightMithril.js","webpack://@fof/linguist/./src/admin/components/StringLocale.js","webpack://@fof/linguist/./src/admin/components/StringKey.js","webpack://@fof/linguist/./src/admin/utils/namespaceLabel.js","webpack://@fof/linguist/./src/admin/utils/frontendLabel.js","webpack://@fof/linguist/./src/admin/pages/StringsPage.js","webpack://@fof/linguist/./src/admin/pages/CoveragePage.js","webpack://@fof/linguist/./src/admin/pages/ExportPage.js","webpack://@fof/linguist/./src/admin/pages/ImportPage.js","webpack://@fof/linguist/./src/admin/pages/LinguistPage.js","webpack://@fof/linguist/./src/admin/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","constructor","__proto__","_defineProperty","obj","configurable","writable","StringKey","Model","attribute","TextString","apiEndpoint","this","exists","data","id","_extends","assign","target","arguments","length","source","apply","locales","app","push","string","highlight","lowercaseHighliht","toLowerCase","regex","RegExp","replace","HIGHLIGHT_DELIMITER","split","map","text","StringLocale","oninit","vnode","stringKey","attrs","locale","localeKey","originalString","store","all","find","dirty","processing","originalHasNewLine","keys","some","indexOf","inputType","view","placeholderText","translator","trans","localeName","className","title","oninput","event","disabled","highlightMithril","actions","onchange","toArray","items","ItemList","add","Button","component","type","loading","onclick","saveString","deleteString","createRecord","attributes","save","then","redraw","err","localesAsArray","namespace","translation","translations","frontend","StringsPage","numberOfResultsToShow","filters","search","withOwnTranslations","missingTranslationsNegation","missingTranslationsType","missingTranslationsInLocale","forExtension","initialBrowseFilters","results","applyFilters","slice","settings","Alert","dismissible","controls","modal","show","LoadingModal","request","method","url","forum","window","location","reload","placeholder","icon","Dropdown","buttonClassName","label","namespaces","extension","extra","namespaceLabel","frontends","frontendLabel","stopPropagation","Select","options","without","with","any","original","own","shown","total","keysWithCustomTranslations","keysWithCustomTranslationsIn","forEach","filter","lowercaseSearch","hasOriginalTranslation","hasOwnTranslation","matchesType","parts","CoveragePage","columns","showAllFrontends","totalPercent","firstNonEnglishLocale","visibleFrontends","browseWithFilters","localeCoverage","style","prefixCoverage","stringKeys","customCount","originalCount","specialStyle","percent","Math","round","translated","width","max","custom","filterButton","callback","ExportPage","includeOriginals","includeAll","output","fetchOutput","localeOptions","namespaceOptions","_all","Switch","state","LinkButton","href","exportUrl","external","download","readonly","rows","buildQueryString","extract","raw","JSON","stringify","error","overrideExisting","input","body","ignoreExisting","confirm","extractText","imported","ignored","identical","LinguistPage","tab","ready","Promise","result","pushPayload","sort","extensions","values","packageNameWithDash","content","contentTab","infoItems","LoadingIndicator","ImportPage","ExtensionPage","initializers","models","extensionData","registerPage"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['components/Select'];","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['components/ExtensionPage'];","module.exports = flarum.core.compat['components/LoadingIndicator'];","module.exports = flarum.core.compat['components/Alert'];","module.exports = flarum.core.compat['components/LoadingModal'];","module.exports = flarum.core.compat['utils/ItemList'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/LinkButton'];","module.exports = flarum.core.compat['utils/extractText'];","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import Model from 'flarum/Model';\n\nexport default class StringKey extends Model {\n    key = Model.attribute('key');\n    locales = Model.attribute('locales');\n}\n","import Model from 'flarum/Model';\n\nexport default class TextString extends Model {\n    key = Model.attribute('key');\n    locale = Model.attribute('locale');\n    value = Model.attribute('value');\n\n    apiEndpoint() {\n        return '/fof/linguist/strings' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import app from 'flarum/app';\n\nexport default function () {\n    let locales = [];\n\n    for (let key in app.data.locales) {\n        if (!app.data.locales.hasOwnProperty(key)) {\n            continue;\n        }\n\n        locales.push({\n            key,\n            name: app.data.locales[key],\n        });\n    }\n\n    return locales;\n}\n","/* global m */\n\nconst HIGHLIGHT_DELIMITER = '<fof-highlight>';\n\n// Takes a string and highlight a keyword with a span with mithril template\n// The output will be an array if a keyword is given\nexport default function (string, highlight) {\n    if (!highlight) {\n        return string;\n    }\n\n    const lowercaseHighliht = highlight.toLowerCase();\n\n    // Regex to match the highlighted work in a case-insensitive manner\n    const regex = new RegExp(lowercaseHighliht.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n\n    return string\n        .replace(regex, HIGHLIGHT_DELIMITER + '$&' + HIGHLIGHT_DELIMITER)\n        .split(HIGHLIGHT_DELIMITER)\n        .map(text => {\n            if (text.toLowerCase() === lowercaseHighliht) {\n                return m('span.FoF-Linguist-Highlight', text);\n            }\n\n            return text;\n        });\n}\n","import app from 'flarum/app';\nimport ItemList from 'flarum/utils/ItemList';\nimport Button from 'flarum/components/Button';\nimport highlightMithril from '../utils/highlightMithril';\n\n/* global m */\n\nexport default class StringLocale {\n    oninit(vnode) {\n        this.stringKey = vnode.attrs.stringKey;\n        this.locale = vnode.attrs.locale;\n        this.localeKey = this.locale ? this.locale.key : null;\n        this.originalString = this.localeKey && this.stringKey.locales().hasOwnProperty(this.localeKey) ? this.stringKey.locales()[this.localeKey] : null;\n\n        this.string = app.store.all('fof-linguist-string').find(\n            string => string.key() === this.stringKey.key() && string.locale() === this.localeKey\n        );\n\n        this.value = this.string ? this.string.value() : '';\n        this.dirty = false;\n        this.processing = false;\n\n        // We check whether any original translation in any language has a newline\n        // By not hard-coding to English, this should work pretty well even if the fallback locale is modified,\n        // or if a text happens to not be available in the fallback language\n        const originalHasNewLine = Object.keys(this.stringKey.locales()).some(key => this.stringKey.locales()[key].indexOf('\\n') !== -1);\n\n        this.inputType = 'input';\n\n        // We will enable multi-line editing if the original has a newline, or if the current custom value already has one\n        if (originalHasNewLine || this.value.indexOf('\\n') !== -1) {\n            this.inputType = 'textarea';\n        }\n    }\n\n    view(vnode) {\n        const placeholderText = this.originalString ? this.originalString : '(' + app.translator.trans('fof-linguist.admin.placeholder.' + (this.localeKey ? 'not-translated' : 'all-locales')) + ')';\n\n        return m('.FoF-Linguist-Locale', [\n            m('label.FoF-Linguist-Label', this.localeName()),\n            m('.FoF-Linguist-Field', {\n                className: (this.value ? 'FoF-Linguist-Field--with-value' : '') + (this.originalString ? ' FoF-Linguist-Field--with-original-string' : ''),\n                title: placeholderText,\n            }, [\n                m('.FoF-Linguist-Field-Wrap', [\n                    m(this.inputType, {\n                        className: 'FormControl FoF-Linguist-Input',\n                        value: this.value,\n                        oninput: event => {\n                            this.value = event.target.value;\n                            this.dirty = true;\n\n                            // Remove dirty state if the user erased his text without saving\n                            if (!this.value && !this.string) {\n                                this.dirty = false;\n                            }\n                        },\n                        disabled: this.processing,\n                    }),\n                    m('.FoF-Linguist-Placeholder', [\n                        m('span.FoF-Linguist-Placeholder-Hint', app.translator.trans('fof-linguist.admin.placeholder.hint')),\n                        ' ',\n                        m('span', this.originalString ? highlightMithril(placeholderText, vnode.attrs.highlight) : placeholderText),\n                    ]),\n                ]),\n            ]),\n            m('.FoF-Linguist-Controls', this.actions(vnode.attrs.onchange).toArray()),\n        ]);\n    }\n\n    localeName() {\n        if (this.locale) {\n            return [this.locale.name + ' (', m('code', this.locale.key), ')'];\n        } else {\n            return app.translator.trans('fof-linguist.admin.locales.all');\n        }\n    }\n\n    actions(onchange) {\n        const items = new ItemList();\n\n        items.add('apply', Button.component({\n            type: 'button',\n            className: 'Button Button--primary',\n            loading: this.processing,\n            disabled: !this.dirty,\n            onclick: () => {\n                this.saveString(onchange);\n            },\n        }, app.translator.trans('fof-linguist.admin.buttons.apply')));\n\n        items.add('reset', Button.component({\n            type: 'button',\n            className: 'Button',\n            loading: this.processing,\n            disabled: !this.dirty && !this.string,\n            onclick: () => {\n                this.deleteString(onchange);\n            },\n        }, app.translator.trans('fof-linguist.admin.buttons.reset')));\n\n        if (this.originalString) {\n            items.add('copy-original', Button.component({\n                type: 'button',\n                className: 'Button',\n                loading: this.processing,\n                onclick: () => {\n                    this.value = this.originalString;\n                    this.dirty = true;\n                },\n            }, app.translator.trans('fof-linguist.admin.buttons.copy-original')));\n        }\n\n        return items;\n    }\n\n    saveString(onchange) {\n        if (!this.value) {\n            this.deleteString(onchange);\n\n            return;\n        }\n\n        if (!this.string) {\n            this.string = app.store.createRecord('fof-linguist-string', {\n                attributes: {\n                    key: this.stringKey.key(),\n                    locale: this.localeKey,\n                    value: '',\n                },\n            });\n        }\n\n        this.string.data.attributes.value = this.value;\n\n        if (!this.string.locale()) delete this.string.data.attributes.locale;\n\n        this.processing = true;\n\n        this.string.save(this.string.data.attributes).then(() => {\n            this.processing = false;\n            this.dirty = false;\n\n            onchange();\n\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n\n            throw err;\n        });\n    }\n\n    deleteString(onchange) {\n        if (this.string) {\n            this.processing = true;\n\n            this.string.delete().then(() => {\n                this.processing = false;\n                this.dirty = false;\n\n                this.string = null;\n                this.value = '';\n\n                onchange();\n\n                m.redraw();\n            }).catch(err => {\n                this.processing = false;\n\n                throw err;\n            });\n        } else {\n            this.value = '';\n            this.dirty = false;\n        }\n    }\n}\n","import StringLocale from '../components/StringLocale';\nimport localesAsArray from '../utils/localesAsArray';\nimport highlightMithril from '../utils/highlightMithril';\n\n/* global m */\n\nexport default class StringKey {\n    view(vnode) {\n        const {\n            stringKey,\n            highlight,\n            onchange,\n        } = vnode.attrs;\n\n        return m('.FoF-Linguist-Key', [\n            m('.FoF-Linguist-Key-Code', m('code', highlightMithril(stringKey.key(), highlight))),\n            m('.FoF-Linguist-Locales', [\n                ...localesAsArray().map(locale => m(StringLocale, {\n                    key: locale.key,\n                    locale,\n                    stringKey,\n                    highlight,\n                    onchange,\n                })),\n                m(StringLocale, {\n                    key: 'all',\n                    locale: null,\n                    stringKey,\n                    highlight,\n                    onchange,\n                }),\n            ]),\n        ]);\n    }\n}\n","import app from 'flarum/app';\n\nexport default function (namespace) {\n    const translation = app.translator.translations['fof-linguist.admin.known-namespace.' + namespace];\n\n    if (translation) {\n        return translation;\n    }\n\n    return namespace;\n}\n","import app from 'flarum/app';\n\nexport default function (frontend) {\n    const translation = app.translator.translations['fof-linguist.admin.known-frontend.' + frontend];\n\n    if (translation) {\n        return translation;\n    }\n\n    return frontend;\n}\n","import app from 'flarum/app';\nimport Button from 'flarum/components/Button';\nimport Dropdown from 'flarum/components/Dropdown';\nimport Select from 'flarum/components/Select';\nimport Alert from 'flarum/components/Alert';\nimport LoadingModal from 'flarum/components/LoadingModal';\nimport localesAsArray from '../utils/localesAsArray';\nimport StringKey from '../components/StringKey';\nimport namespaceLabel from '../utils/namespaceLabel';\nimport frontendLabel from '../utils/frontendLabel';\n\n/* global m */\n\nconst RESULTS_PER_PAGE = 20;\n\nexport default class StringsPage {\n    oninit(vnode) {\n        this.numberOfResultsToShow = RESULTS_PER_PAGE;\n\n        this.filters = Object.assign({\n            search: '',\n            withOwnTranslations: false,\n            missingTranslationsNegation: 'without',\n            missingTranslationsType: 'any',\n            missingTranslationsInLocale: null,\n            forExtension: null,\n            frontend: null,\n        }, vnode.attrs.initialBrowseFilters || {});\n\n        this.results = [];\n\n        this.applyFilters();\n    }\n\n    view(vnode) {\n        const keys = this.results.slice(0, this.numberOfResultsToShow);\n\n        return [\n            // Additional divs are used to reduce Mithril redraws as much as possible when the conditional components appear\n            m('div', app.data.settings['fof.linguist.should-clear-cache'] === '1' ? Alert.component({\n                dismissible: false,\n                controls: [Button.component({\n                    className: 'Button Button--link',\n                    onclick() {\n                        // Same logic as in core StatusWidget\n                        app.modal.show(LoadingModal);\n\n                        app.request({\n                            method: 'DELETE',\n                            url: app.forum.attribute('apiUrl') + '/cache',\n                        }).then(() => window.location.reload());\n                    },\n                }, app.translator.trans('fof-linguist.admin.clear-cache.button'))],\n            }, app.translator.trans('fof-linguist.admin.clear-cache.text')) : null),\n            m('.FoF-Linguist-Filters', [\n                m('input.FormControl', {\n                    value: this.filters.search,\n                    oninput: event => {\n                        this.filters.search = event.target.value;\n                        this.applyFilters();\n                    },\n                    placeholder: app.translator.trans('fof-linguist.admin.filters.search'),\n                }),\n                Button.component({\n                    className: 'Button' + (this.filters.withOwnTranslations ? ' FoF-Linguist-Filter--Selected' : ''),\n                    icon: `far fa-${this.filters.withOwnTranslations ? 'check-square' : 'square'}`,\n                    onclick: () => {\n                        this.filters.withOwnTranslations = !this.filters.withOwnTranslations;\n                        this.applyFilters();\n                    },\n                }, app.translator.trans('fof-linguist.admin.filters.with-own-translations')),\n                Dropdown.component({\n                    buttonClassName: 'Button' + (this.filters.forExtension ? ' FoF-Linguist-Filter--Selected' : ''),\n                    label: app.translator.trans('fof-linguist.admin.filters.for-extension'),\n                }, vnode.attrs.namespaces.map(\n                    namespace => Button.component({\n                        className: 'Button',\n                        icon: `far fa-${this.filters.forExtension === namespace.namespace ? 'dot-circle' : 'circle'}`,\n                        onclick: () => {\n                            if (this.filters.forExtension === namespace.namespace) {\n                                this.filters.forExtension = null;\n                            } else {\n                                this.filters.forExtension = namespace.namespace;\n                            }\n\n                            this.applyFilters();\n                        },\n                    }, namespace.extension ? namespace.extension.extra['flarum-extension'].title : namespaceLabel(namespace.namespace))\n                )),\n                Dropdown.component({\n                    buttonClassName: 'Button' + (this.filters.frontend ? ' FoF-Linguist-Filter--Selected' : ''),\n                    label: app.translator.trans('fof-linguist.admin.filters.frontend'),\n                }, [\n                    '_all_except_admin',\n                    ...vnode.attrs.frontends,\n                ].map(\n                    frontend => Button.component({\n                        className: 'Button',\n                        icon: `far fa-${this.filters.frontend === frontend ? 'dot-circle' : 'circle'}`,\n                        onclick: () => {\n                            if (this.filters.frontend === frontend) {\n                                this.filters.frontend = null;\n                            } else {\n                                this.filters.frontend = frontend;\n                            }\n\n                            this.applyFilters();\n                        },\n                    }, frontend === '_all_except_admin' ? app.translator.trans('fof-linguist.admin.filters.frontend-all-except-admin') : frontendLabel(frontend))\n                )),\n                Dropdown.component({\n                    buttonClassName: 'Button' + (this.filters.missingTranslationsInLocale ? ' FoF-Linguist-Filter--Selected' : ''),\n                    label: app.translator.trans('fof-linguist.admin.filters.missing'),\n                }, [\n                    m('.FoF-Linguist-Missing-Filter', {\n                        onclick(event) {\n                            // Prevent closing the dropdown\n                            event.stopPropagation();\n                        },\n                    }, [\n                        Select.component({\n                            value: this.filters.missingTranslationsNegation,\n                            onchange: value => {\n                                this.filters.missingTranslationsNegation = value;\n\n                                if (this.filters.missingTranslationsInLocale) {\n                                    this.applyFilters();\n                                }\n                            },\n                            options: {\n                                without: app.translator.trans('fof-linguist.admin.filters.negation-options.without'),\n                                with: app.translator.trans('fof-linguist.admin.filters.negation-options.with'),\n                            }\n                        }),\n                        Select.component({\n                            value: this.filters.missingTranslationsType,\n                            onchange: value => {\n                                this.filters.missingTranslationsType = value;\n\n                                if (this.filters.missingTranslationsInLocale) {\n                                    this.applyFilters();\n                                }\n                            },\n                            options: {\n                                any: app.translator.trans('fof-linguist.admin.filters.type-options.any'),\n                                original: app.translator.trans('fof-linguist.admin.filters.type-options.original'),\n                                own: app.translator.trans('fof-linguist.admin.filters.type-options.own'),\n                            }\n                        }),\n                        m('p', app.translator.trans('fof-linguist.admin.filters.missing-middle-label')),\n                    ]),\n                    ...localesAsArray().map(\n                        locale => Button.component({\n                            className: 'Button',\n                            icon: `far fa-${this.filters.missingTranslationsInLocale === locale.key ? 'check-square' : 'square'}`,\n                            onclick: () => {\n                                if (this.filters.missingTranslationsInLocale === locale.key) {\n                                    this.filters.missingTranslationsInLocale = null\n                                } else {\n                                    this.filters.missingTranslationsInLocale = locale.key;\n                                }\n\n                                this.applyFilters();\n                            },\n                        }, locale.name + ' (' + locale.key + ')')\n                    ),\n                ]),\n            ]),\n            m('div', keys.map(stringKey => m(StringKey, {\n                key: stringKey.id(),\n                stringKey,\n                highlight: this.filters.search,\n                onchange: () => {\n                    // We use the setting and not a local variable because we need to preserve state\n                    // if we navigate away and back to the Linguist page without refreshing the admin panel\n                    app.data.settings['fof.linguist.should-clear-cache'] = '1';\n                },\n            }))),\n            m('.FoF-Linguist-Results', [\n                app.translator.trans('fof-linguist.admin.filters.results', {\n                    shown: keys.length + '', // cast to string otherwise number isn't displayed\n                    total: this.results.length + '',\n                }),\n                ' ',\n                (this.results.length > keys.length ? Button.component({\n                    className: 'Button',\n                    onclick: () => {\n                        this.numberOfResultsToShow += RESULTS_PER_PAGE;\n                    },\n                }, app.translator.trans('fof-linguist.admin.buttons.load-more')) : null),\n            ]),\n        ];\n    }\n\n    applyFilters() {\n        this.numberOfResultsToShow = RESULTS_PER_PAGE;\n\n        const keysWithCustomTranslations = app.store.all('fof-linguist-string').map(string => string.key());\n\n        const keysWithCustomTranslationsIn = {};\n        localesAsArray().forEach(locale => {\n            keysWithCustomTranslationsIn[locale.key] = app.store.all('fof-linguist-string')\n                .filter(string => string.locale() === locale.key)\n                .map(string => string.key());\n        });\n\n        let lowercaseSearch = '';\n\n        if (this.filters.search) {\n            lowercaseSearch = this.filters.search.toLowerCase();\n        }\n\n        this.results = app.store.all('fof-linguist-string-key').filter(key => {\n            if (this.filters.withOwnTranslations && keysWithCustomTranslations.indexOf(key.key()) === -1) {\n                return false;\n            }\n\n            if (this.filters.missingTranslationsInLocale) {\n                let hasOriginalTranslation = key.locales().hasOwnProperty(this.filters.missingTranslationsInLocale);\n                let hasOwnTranslation = keysWithCustomTranslationsIn[this.filters.missingTranslationsInLocale].indexOf(key.key()) !== -1;\n\n                let matchesType = false;\n\n                switch (this.filters.missingTranslationsType) {\n                    case 'any':\n                        matchesType = hasOriginalTranslation || hasOwnTranslation;\n                        break;\n                    case 'original':\n                        matchesType = hasOriginalTranslation;\n                        break;\n                    case 'own':\n                        matchesType = hasOwnTranslation;\n                        break;\n                }\n\n                if (this.filters.missingTranslationsNegation === 'without') {\n                    matchesType = !matchesType;\n                }\n\n                if (!matchesType) {\n                    return false;\n                }\n            }\n\n            if (this.filters.forExtension) {\n                if (key.key().indexOf(this.filters.forExtension + '.') !== 0) {\n                    return false;\n                }\n            }\n\n            if (this.filters.frontend) {\n                const parts = key.key().split('.');\n\n                if (this.filters.frontend === '_all_except_admin') {\n                    // We will keep everything that isn't admin, including if it's a single level deep\n                    if (parts.length >= 2 && parts[1] === 'admin') {\n                        return false;\n                    }\n                } else {\n                    // Keep only parts with 2 levels or more where second level matches frontend\n                    if (parts.length < 2 || parts[1] !== this.filters.frontend) {\n                        return false;\n                    }\n                }\n            }\n\n            if (lowercaseSearch) {\n                if (key.key().toLowerCase().indexOf(lowercaseSearch) !== -1) {\n                    return true;\n                }\n\n                const locales = key.locales();\n\n                for (let locale in locales) {\n                    if (locales.hasOwnProperty(locale) && locales[locale].toLowerCase().indexOf(lowercaseSearch) !== -1) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n\n            return true;\n        });\n\n        m.redraw();\n    }\n}\n","import app from 'flarum/app';\nimport Button from 'flarum/components/Button';\nimport icon from 'flarum/helpers/icon';\nimport localesAsArray from '../utils/localesAsArray';\nimport namespaceLabel from '../utils/namespaceLabel';\nimport frontendLabel from '../utils/frontendLabel';\n\n/* global m */\n\nexport default class CoveragePage {\n    oninit() {\n        this.columns = 'locale';\n        this.showAllFrontends = false;\n        this.totalPercent = true;\n        this.locale = [];\n\n        const firstNonEnglishLocale = localesAsArray().find(locale => locale.key !== 'en');\n\n        if (firstNonEnglishLocale) {\n            this.locale = firstNonEnglishLocale.key;\n        }\n    }\n\n    view(vnode) {\n        let visibleFrontends = vnode.attrs.frontends.slice(0, 2);\n\n        if (this.showAllFrontends) {\n            visibleFrontends = vnode.attrs.frontends;\n        }\n\n        const {browseWithFilters} = vnode.attrs;\n\n        return [\n            m('.FoF-Linguist-Filters', [\n                m('.ButtonGroup', [\n                    Button.component({\n                        className: 'Button' + (this.totalPercent ? ' active' : ''),\n                        onclick: () => {\n                            this.totalPercent = true;\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.total-options.percent')),\n                    Button.component({\n                        className: 'Button' + (this.totalPercent ? ' ' : ' active'),\n                        onclick: () => {\n                            this.totalPercent = false;\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.total-options.count')),\n                ]),\n                m('.ButtonGroup', [\n                    Button.component({\n                        className: 'Button' + (this.columns === 'locale' ? ' active' : ''),\n                        onclick: () => {\n                            this.columns = 'locale';\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.column-options.locale')),\n                    Button.component({\n                        className: 'Button' + (this.columns === 'namespace' ? ' active' : ''),\n                        onclick: () => {\n                            this.columns = 'namespace';\n                            this.showAllFrontends = false;\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.column-options.namespace')),\n                ]),\n                this.columns === 'namespace' ? m('.ButtonGroup', localesAsArray().map(\n                    locale => Button.component({\n                        className: 'Button' + (this.locale === locale.key ? ' active' : ''),\n                        onclick: () => {\n                            if (this.locale !== locale.key) {\n                                this.locale = locale.key;\n                            }\n                        },\n                    }, locale.name + ' (' + locale.key + ')')\n                )) : null,\n            ]),\n            m('table.FoF-Linguist-Coverage', [\n                m('thead', m('tr', [\n                    m('th', app.translator.trans('fof-linguist.admin.coverage.columns.namespace')),\n                    this.columns === 'locale' ? localesAsArray().map(locale => m('th', locale.name + ' (' + locale.key + ')')) : [\n                        this.showAllFrontends ? visibleFrontends.map(frontend => m('th', frontendLabel(frontend))) : [\n                            m('th', app.translator.trans('fof-linguist.admin.coverage.columns.all-except-admin')),\n                            m('th', frontendLabel('admin')),\n                            m('th', Button.component({\n                                className: 'Button',\n                                onclick: () => {\n                                    this.showAllFrontends = true;\n                                },\n                            }, app.translator.trans('fof-linguist.admin.coverage.columns.all-frontends'))),\n                        ],\n                    ],\n                ])),\n                m('tbody', [\n                    this.columns === 'locale' ? m('tr', [\n                        m('td', [\n                            m('span.FoF-Linguist-Coverage-Extension-Icon.FoF-Linguist-Coverage-Namespace-Icon'),\n                            m('span.FoF-Linguist-Coverage-Extension-Title', app.translator.trans('fof-linguist.admin.coverage.all-namespaces')),\n                        ]),\n                        localesAsArray().map(locale => m('td', this.localeCoverage(browseWithFilters, locale.key))),\n                    ]) : null,\n                    vnode.attrs.namespaces.map(namespace => {\n                        return m('tr', [\n                            m('td', namespace.extension ? [\n                                m('span.FoF-Linguist-Coverage-Extension-Icon', {\n                                    style: namespace.extension.icon,\n                                }, namespace.extension.icon ? icon(namespace.extension.icon.name) : ''),\n                                m('span.FoF-Linguist-Coverage-Extension-Title', namespace.extension.extra['flarum-extension'].title),\n                            ] : [\n                                m('span.FoF-Linguist-Coverage-Extension-Icon.FoF-Linguist-Coverage-Namespace-Icon'),\n                                m('span.FoF-Linguist-Coverage-Extension-Title', namespaceLabel(namespace.namespace)),\n                            ]),\n                            this.columns === 'locale' ? localesAsArray().map(locale => m('td', this.localeCoverage(browseWithFilters, locale.key, namespace.namespace))) : [\n                                this.showAllFrontends ?\n                                    visibleFrontends.map(frontend => m('td', this.prefixCoverage(browseWithFilters, namespace.namespace, frontend))) : [\n                                        m('td', this.prefixCoverage(browseWithFilters, namespace.namespace, '_all_except_admin')),\n                                        m('td', this.prefixCoverage(browseWithFilters, namespace.namespace, 'admin')),\n                                    ],\n                            ],\n                        ]);\n                    }),\n                ]),\n            ]),\n        ];\n    }\n\n    prefixCoverage(browseWithFilters, namespace, frontend) {\n        if (!this.locale) {\n            return null;\n        }\n\n        return this.localeCoverage(browseWithFilters, this.locale, namespace, frontend);\n    }\n\n    localeCoverage(browseWithFilters, locale, namespace, frontend) {\n        const stringKeys = app.store.all('fof-linguist-string-key').filter(key => {\n            if (!namespace) {\n                return true;\n            }\n\n            const parts = key.key().split('.');\n\n            if (parts[0] !== namespace) {\n                return false;\n            }\n\n            if (frontend === '_all_except_admin') {\n                if (parts.length >= 2 && parts[1] === 'admin') {\n                    return false;\n                }\n            } else if (frontend && (parts.length < 2 || parts[1] !== frontend)) {\n                return false;\n            }\n\n            return true;\n        });\n\n        if (stringKeys.length === 0) {\n            return '-';\n        }\n\n        let customCount = 0;\n        let originalCount = 0;\n\n        stringKeys.forEach(stringKey => {\n            const customString = app.store.all('fof-linguist-string').find(\n                string => string.key() === stringKey.key() && string.locale() === locale\n            );\n\n            if (customString) {\n                customCount++;\n            } else if (stringKey.locales().hasOwnProperty(locale)) {\n                originalCount++;\n            }\n        });\n\n        const percent = Math.round(((customCount + originalCount) / stringKeys.length) * 100);\n\n        let specialStyle;\n\n        if (percent === 100) {\n            specialStyle = 'full';\n        } else if (percent < 5) {\n            specialStyle = 'low';\n        }\n\n        let label;\n\n        if (this.totalPercent) {\n            label = app.translator.trans('fof-linguist.admin.coverage.count.percent', {\n                percent: percent + '', // Keeps zero as string\n            });\n        } else {\n            label = app.translator.trans('fof-linguist.admin.coverage.count.total', {\n                translated: (customCount + originalCount) + '', // Keeps zero as string\n                total: stringKeys.length,\n            });\n        }\n\n        return m('.FoF-Linguist-Coverage-Progress-Wrap', [\n            m('.FoF-Linguist-Progress', {\n                className: specialStyle ? 'FoF-Linguist-Progress--' + specialStyle : '',\n            }, [\n                m('.FoF-Linguist-Progress-Bar', {\n                    style: {\n                        width: Math.max(percent, 5) + '%', // Always show the progress bar even if very close to 0\n                    },\n                }),\n                m('.FoF-Linguist-Progress-Label', label),\n                m('.FoF-Linguist-Progress-More', app.translator.trans('fof-linguist.admin.coverage.count.details', {\n                    total: stringKeys.length,\n                    original: originalCount + '', // Cast to string to preserve zero\n                    custom: customCount + '',\n                })),\n            ]),\n            Button.component({\n                icon: 'fas fa-filter',\n                className: 'Button Button--icon',\n                onclick: () => {\n                    const options = {\n                        missingTranslationsInLocale: locale,\n                    };\n\n                    if (namespace) {\n                        options.forExtension = namespace;\n                    }\n\n                    if (frontend) {\n                        options.frontend = frontend;\n                    }\n\n                    browseWithFilters(options);\n                },\n                title: app.translator.trans('fof-linguist.admin.coverage.apply-missing-filter'),\n            }),\n        ]);\n    }\n\n    filterButton(callback) {\n        return Button.component({\n            icon: 'fas fa-filter',\n            className: 'Button Button--icon',\n            onclick: () => {\n                callback();\n            },\n            title: app.translator.trans('fof-linguist.admin.coverage.apply-missing-filter'),\n        })\n    }\n}\n","import app from 'flarum/app';\nimport Select from 'flarum/components/Select';\nimport Switch from 'flarum/components/Switch';\nimport LinkButton from 'flarum/components/LinkButton';\nimport localesAsArray from '../utils/localesAsArray';\nimport namespaceLabel from '../utils/namespaceLabel';\n\n/* global m */\n\nexport default class ExportPage {\n    oninit() {\n        this.locale = 'en';\n        this.namespace = null;\n        this.includeOriginals = false;\n        this.includeAll = false;\n        this.loading = false;\n        this.output = '';\n\n        this.fetchOutput();\n    }\n\n    view(vnode) {\n        const localeOptions = {};\n\n        localesAsArray().forEach(locale => {\n            localeOptions[locale.key] = locale.name + ' (' + locale.key + ')';\n        });\n\n        localeOptions.all = app.translator.trans('fof-linguist.admin.export.locale-all')\n\n        const namespaceOptions = {\n            _all: app.translator.trans('fof-linguist.admin.export.namespace-all'),\n        };\n\n        vnode.attrs.namespaces.forEach(namespace => {\n            if (namespace.extension) {\n                namespaceOptions[namespace.namespace] = namespace.extension.extra['flarum-extension'].title;\n            } else {\n                namespaceOptions[namespace.namespace] = namespaceLabel(namespace.namespace);\n\n            }\n        });\n\n        return [\n            m('h2', app.translator.trans('fof-linguist.admin.export.title')),\n            m('.Form-group', m('.Alert', app.translator.trans('fof-linguist.admin.export.warning'))),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.export.locale')),\n                Select.component({\n                    options: localeOptions,\n                    value: this.locale,\n                    onchange: value => {\n                        this.locale = value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.export.namespace')),\n                Select.component({\n                    options: namespaceOptions,\n                    value: this.namespace === null ? '_all' : this.namespace,\n                    onchange: value => {\n                        this.namespace = value === '_all' ? null : value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m('.Form-group', [\n                Switch.component({\n                    state: this.includeOriginals,\n                    onchange: value => {\n                        this.includeOriginals = value;\n\n                        this.fetchOutput();\n                    }\n                }, app.translator.trans('fof-linguist.admin.export.include-originals')),\n            ]),\n            m('.Form-group', [\n                Switch.component({\n                    state: this.includeAll,\n                    onchange: value => {\n                        this.includeAll = value;\n\n                        this.fetchOutput();\n                    }\n                }, app.translator.trans('fof-linguist.admin.export.include-all')),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    app.translator.trans('fof-linguist.admin.export.output'),\n                    ' ',\n                    LinkButton.component({\n                        className: 'Button Button--primary',\n                        href: this.exportUrl(),\n                        external: true,\n                        download: this.locale + '.yml',\n                    }, app.translator.trans('fof-linguist.admin.export.download')),\n                ]),\n                m('textarea.FormControl.FoF-Export-Textarea', {\n                    readonly: true,\n                    value: this.output,\n                    rows: 10,\n                    placeholder: this.loading ? app.translator.trans('fof-linguist.admin.export.output-loading') : app.translator.trans('fof-linguist.admin.export.output-empty'),\n                }),\n            ]),\n        ];\n    }\n\n    exportUrl() {\n        return app.forum.attribute('apiUrl') + '/fof/linguist/export?' + m.buildQueryString({\n            locale: this.locale,\n            namespace: this.namespace,\n            includeOriginals: this.includeOriginals ? '1' : '0',\n            includeAll: this.includeAll ? '1' : '0',\n        });\n    }\n\n    fetchOutput() {\n        this.loading = true;\n        this.output = '';\n\n        app.request({\n            method: 'GET',\n            url: this.exportUrl(),\n            // Flarum doesn't support a raw to have the raw text response\n            // So we'll encode the response with JSON so Flarum can parse if afterwards\n            extract: raw => JSON.stringify(raw),\n        }).then(output => {\n            this.loading = false;\n            this.output = output;\n            m.redraw();\n        }).catch(error => {\n            this.loading = false;\n            m.redraw();\n            throw error;\n        });\n    }\n}\n","import app from 'flarum/app';\nimport Button from 'flarum/components/Button';\nimport Select from 'flarum/components/Select';\nimport Switch from 'flarum/components/Switch';\nimport extractText from 'flarum/utils/extractText';\nimport localesAsArray from '../utils/localesAsArray';\n\n/* global m */\n\nexport default class ExportPage {\n    oninit() {\n        this.locale = 'en';\n        this.overrideExisting = true;\n        this.input = '';\n        this.loading = false;\n    }\n\n    view() {\n        const localeOptions = {};\n\n        localesAsArray().forEach(locale => {\n            localeOptions[locale.key] = locale.name + ' (' + locale.key + ')';\n        });\n\n        localeOptions.all = app.translator.trans('fof-linguist.admin.import.locale-all')\n\n        return [\n            m('h2', app.translator.trans('fof-linguist.admin.import.title')),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.import.input')),\n                m('textarea.FormControl', {\n                    value: this.input,\n                    oninput: event => {\n                        this.input = event.target.value;\n                    },\n                    rows: 10,\n                    placeholder: app.translator.trans('fof-linguist.admin.import.input-placeholder'),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.import.locale')),\n                Select.component({\n                    options: localeOptions,\n                    value: this.locale,\n                    onchange: value => {\n                        this.locale = value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m('.Form-group', [\n                Switch.component({\n                    state: this.overrideExisting,\n                    onchange: value => {\n                        this.overrideExisting = value;\n                    }\n                }, app.translator.trans('fof-linguist.admin.import.override-existing')),\n            ]),\n            m('.Form-group', Button.component({\n                className: 'Button Button--primary',\n                onclick: () => {\n                    this.loading = true;\n\n                    app.request({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + '/fof/linguist/import',\n                        body: {\n                            input: this.input,\n                            locale: this.locale,\n                            ignoreExisting: !this.overrideExisting,\n                        },\n                    }).then(data => {\n                        this.loading = false;\n                        m.redraw();\n\n                        if (confirm(extractText(app.translator.trans(this.overrideExisting ? 'fof-linguist.admin.import.results' : 'fof-linguist.admin.import.results-with-ignore', {\n                            imported: data.imported + '', // Cast to string to preserve zeros\n                            ignored: data.ignored + '',\n                            identical: data.identical + '',\n                        })))) {\n                            window.location.reload();\n                        }\n                    }).catch(error => {\n                        this.loading = false;\n                        m.redraw();\n                        throw error;\n                    });\n                },\n                disabled: this.loading || !this.input,\n                loading: this.loading,\n            }, app.translator.trans('fof-linguist.admin.import.submit'))),\n        ];\n    }\n}\n","import app from 'flarum/app';\nimport ExtensionPage from 'flarum/components/ExtensionPage';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport StringsPage from './StringsPage';\nimport CoveragePage from './CoveragePage';\nimport ExportPage from './ExportPage';\nimport ImportPage from './ImportPage';\n\n/* global m */\n\nexport default class LinguistPage extends ExtensionPage {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tab = 'strings';\n        this.ready = false;\n        this.namespaces = []; // First level of translation keys. Usually an extension ID, but also core and validation\n        this.frontends = [\n            'forum',\n            'admin',\n            'lib',\n            'ref',\n            'api',\n        ]; // Second level of translation keys: forum, admin, ...\n        this.initialBrowseFilters = {};\n\n        Promise.all([\n            app.request({\n                method: 'GET',\n                url: app.forum.attribute('apiUrl') + '/fof/linguist/strings',\n            }).then(result => {\n                app.store.pushPayload(result);\n            }),\n            app.request({\n                method: 'GET',\n                url: app.forum.attribute('apiUrl') + '/fof/linguist/string-keys',\n            }).then(result => {\n                const keys = app.store.pushPayload(result);\n\n                const namespaces = [];\n\n                keys.forEach(key => {\n                    const parts = key.key().split('.');\n\n                    const namespace = parts[0];\n\n                    if (['core', 'validation'].indexOf(namespace) === -1 && namespaces.indexOf(namespace) === -1) {\n                        namespaces.push(namespace);\n                    }\n\n                    if (parts.length > 1 && namespace !== 'validation') {\n                        const frontend = parts[1];\n\n                        if (this.frontends.indexOf(frontend) === -1) {\n                            this.frontends.push(frontend);\n                        }\n                    }\n                });\n\n                namespaces.sort();\n\n                this.namespaces = [\n                    {\n                        namespace: 'core',\n                    },\n                    {\n                        namespace: 'validation',\n                    },\n                    ...namespaces.map(namespace => {\n                        // First we look if the namespace matches an extension ID, that's the most common naming\n                        let extension = app.data.extensions[namespace];\n\n                        // If that's unsuccessful, we'll look if the full package name was used as namespace\n                        if (!extension) {\n                            extension = Object.values(app.data.extensions).find(extension => {\n                                const packageNameWithDash = extension.name.replace('/', '-');\n\n                                return namespace === packageNameWithDash;\n                            });\n                        }\n\n                        return {\n                            namespace,\n                            extension,\n                        };\n                    }),\n                ];\n            }),\n        ]).then(() => {\n            this.ready = true;\n            m.redraw();\n        });\n    }\n\n    content() {\n        return m('.ExtensionPage-settings', m('.container', [\n            this.contentTab(),\n        ]));\n    }\n\n    infoItems() {\n        const items = super.infoItems();\n\n        items.add('linguist-tabs', m('ul.FoF-Linguist-Tabs', [\n            m('li', m('a', {\n                className: this.tab === 'strings' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'strings';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.strings'))),\n            m('li', m('a', {\n                className: this.tab === 'coverage' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'coverage';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.coverage'))),\n            m('li', m('a', {\n                className: this.tab === 'export' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'export';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.export'))),\n            m('li', m('a', {\n                className: this.tab === 'import' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'import';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.import'))),\n        ]), 100);\n\n        return items;\n    }\n\n    contentTab() {\n        if (!this.ready) {\n            return LoadingIndicator.component();\n        }\n\n        switch (this.tab) {\n            case 'strings':\n                return m(StringsPage, {\n                    namespaces: this.namespaces,\n                    frontends: this.frontends,\n                    initialBrowseFilters: this.initialBrowseFilters,\n                });\n            case 'coverage':\n                return m(CoveragePage, {\n                    namespaces: this.namespaces,\n                    frontends: this.frontends,\n                    browseWithFilters: filters => {\n                        this.initialBrowseFilters = filters;\n                        this.tab = 'strings';\n                    },\n                });\n            case 'export':\n                return m(ExportPage, {\n                    namespaces: this.namespaces,\n                });\n            case 'import':\n                return m(ImportPage);\n        }\n\n        return null;\n    }\n}\n","import app from 'flarum/app';\nimport StringKey from './models/StringKey';\nimport TextString from './models/TextString';\nimport LinguistPage from './pages/LinguistPage';\n\napp.initializers.add('fof-linguist', app => {\n    app.store.models['fof-linguist-string-key'] = StringKey;\n    app.store.models['fof-linguist-string'] = TextString;\n\n    app.extensionData.for('fof-linguist').registerPage(LinguistPage);\n});\n"],"sourceRoot":""}