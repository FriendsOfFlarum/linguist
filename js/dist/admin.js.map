{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@fof/linguist/webpack/bootstrap","webpack://@fof/linguist/webpack/runtime/compat get default export","webpack://@fof/linguist/webpack/runtime/define property getters","webpack://@fof/linguist/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/linguist/webpack/runtime/make namespace object","webpack://@fof/linguist/external root \"flarum.core.compat['admin/app']\"","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/linguist/./src/admin/models/StringKey.ts","webpack://@fof/linguist/./src/admin/models/TextString.ts","webpack://@fof/linguist/external root \"flarum.core.compat['admin/components/ExtensionPage']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Dropdown']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Select']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@fof/linguist/external root \"flarum.core.compat['admin/components/LoadingModal']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@fof/linguist/./src/admin/utils/localesAsArray.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/Component']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/linguist/./src/admin/utils/highlightMithril.js","webpack://@fof/linguist/./src/admin/components/StringLocale.js","webpack://@fof/linguist/./src/admin/components/StringKey.tsx","webpack://@fof/linguist/./src/admin/utils/namespaceLabel.js","webpack://@fof/linguist/./src/admin/utils/frontendLabel.js","webpack://@fof/linguist/./src/admin/utils/booleanCheck.js","webpack://@fof/linguist/./src/admin/pages/StringsPage.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/linguist/./src/admin/pages/CoveragePage.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@fof/linguist/./src/admin/pages/ExportPage.js","webpack://@fof/linguist/./src/admin/pages/ImportPage.js","webpack://@fof/linguist/./src/admin/pages/LinguistPage.js","webpack://@fof/linguist/./src/admin/components/index.ts","webpack://@fof/linguist/./src/admin/models/index.ts","webpack://@fof/linguist/./src/admin/pages/index.js","webpack://@fof/linguist/./src/admin/utils/index.js","webpack://@fof/linguist/./src/admin/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Model from \"flarum/common/Model\";\n\nexport default class StringKey extends Model {\n    key = Model.attribute<string>(\"key\");\n    locales = Model.attribute<Record<string, string>>(\"locales\");\n}\n","import Model from \"flarum/common/Model\";\n\nexport default class TextString extends Model {\n    key = Model.attribute<string>(\"key\");\n    locale = Model.attribute<string>(\"locale\");\n    value = Model.attribute<string>(\"value\");\n\n    apiEndpoint() {\n        return (\n            // @ts-ignore\n            \"/fof/linguist/strings\" + (this.exists ? \"/\" + this.data.id : \"\")\n        );\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/ExtensionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Dropdown'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/LoadingModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","import app from \"flarum/admin/app\";\n\nexport default function () {\n    let locales = [];\n\n    let englishFound = false;\n\n    for (let key in app.data.locales) {\n        if (!app.data.locales.hasOwnProperty(key)) {\n            continue;\n        }\n\n        if (key === \"en\") {\n            englishFound = true;\n        }\n\n        locales.push({\n            key,\n            name: app.data.locales[key],\n        });\n    }\n\n    // Always show English for the following reasons:\n    // It's the fallback locale, so the translations are always active\n    // It's the bundled locale for most extensions, so it makes sense to have access to it as reference\n    if (!englishFound) {\n        locales.unshift({\n            key: \"en\",\n            // Hard-coded to the same value as in flarum/lang-english composer.json\n            // Since other locale names won't be translated to the current language either it doesn't make sense to use a translation\n            name: \"English\",\n        });\n    }\n\n    return locales;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","/* global m */\n\nconst HIGHLIGHT_DELIMITER = \"<fof-highlight>\";\n\n// Takes a string and highlight a keyword with a span with mithril template\n// The output will be an array if a keyword is given\nexport default function (string, highlight) {\n    if (!highlight) {\n        return string;\n    }\n\n    const lowercaseHighliht = highlight.toLowerCase();\n\n    // Regex to match the highlighted work in a case-insensitive manner\n    const regex = new RegExp(\n        lowercaseHighliht.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"),\n        \"i\",\n    );\n\n    return string\n        .replace(regex, HIGHLIGHT_DELIMITER + \"$&\" + HIGHLIGHT_DELIMITER)\n        .split(HIGHLIGHT_DELIMITER)\n        .map((text) => {\n            if (text.toLowerCase() === lowercaseHighliht) {\n                return m(\"span.FoF-Linguist-Highlight\", text);\n            }\n\n            return text;\n        });\n}\n","import app from \"flarum/admin/app\";\nimport ItemList from \"flarum/common/utils/ItemList\";\nimport Button from \"flarum/common/components/Button\";\nimport highlightMithril from \"../utils/highlightMithril\";\n\n/* global m */\n\nexport default class StringLocale {\n    oninit(vnode) {\n        this.stringKey = vnode.attrs.stringKey;\n        this.locale = vnode.attrs.locale;\n        this.localeKey = this.locale ? this.locale.key : null;\n        this.originalString =\n            this.localeKey &&\n            this.stringKey.locales().hasOwnProperty(this.localeKey)\n                ? this.stringKey.locales()[this.localeKey]\n                : null;\n\n        this.string = app.store\n            .all(\"fof-linguist-string\")\n            .find(\n                (string) =>\n                    string.key() === this.stringKey.key() &&\n                    string.locale() === this.localeKey,\n            );\n\n        this.value = this.string ? this.string.value() : \"\";\n        this.dirty = false;\n        this.processing = false;\n\n        // We check whether any original translation in any language has a newline\n        // By not hard-coding to English, this should work pretty well even if the fallback locale is modified,\n        // or if a text happens to not be available in the fallback language\n        const originalHasNewLine = Object.keys(this.stringKey.locales()).some(\n            (key) => this.stringKey.locales()[key].indexOf(\"\\n\") !== -1,\n        );\n\n        this.inputType = \"input\";\n\n        // We will enable multi-line editing if the original has a newline, or if the current custom value already has one\n        if (originalHasNewLine || this.value.indexOf(\"\\n\") !== -1) {\n            this.inputType = \"textarea\";\n        }\n    }\n\n    view(vnode) {\n        const placeholderText = this.originalString\n            ? this.originalString\n            : \"(\" +\n              app.translator.trans(\n                  \"fof-linguist.admin.placeholder.\" +\n                      (this.localeKey ? \"not-translated\" : \"all-locales\"),\n              ) +\n              \")\";\n\n        return m(\".FoF-Linguist-Locale\", [\n            m(\"label.FoF-Linguist-Label\", this.localeName()),\n            m(\n                \".FoF-Linguist-Field\",\n                {\n                    className:\n                        (this.value ? \"FoF-Linguist-Field--with-value\" : \"\") +\n                        (this.originalString\n                            ? \" FoF-Linguist-Field--with-original-string\"\n                            : \"\"),\n                    title: placeholderText,\n                },\n                [\n                    m(\".FoF-Linguist-Field-Wrap\", [\n                        m(this.inputType, {\n                            className: \"FormControl FoF-Linguist-Input\",\n                            value: this.value,\n                            oninput: (event) => {\n                                this.value = event.target.value;\n                                this.dirty = true;\n\n                                // Remove dirty state if the user erased his text without saving\n                                if (!this.value && !this.string) {\n                                    this.dirty = false;\n                                }\n                            },\n                            disabled: this.processing,\n                        }),\n                        m(\".FoF-Linguist-Placeholder\", [\n                            m(\n                                \"span.FoF-Linguist-Placeholder-Hint\",\n                                app.translator.trans(\n                                    \"fof-linguist.admin.placeholder.hint\",\n                                ),\n                            ),\n                            \" \",\n                            m(\n                                \"span\",\n                                this.originalString\n                                    ? highlightMithril(\n                                          placeholderText,\n                                          vnode.attrs.highlight,\n                                      )\n                                    : placeholderText,\n                            ),\n                        ]),\n                    ]),\n                ],\n            ),\n            m(\n                \".FoF-Linguist-Controls\",\n                this.actions(vnode.attrs.onchange).toArray(),\n            ),\n        ]);\n    }\n\n    localeName() {\n        if (this.locale) {\n            return [this.locale.name + \" (\", m(\"code\", this.locale.key), \")\"];\n        } else {\n            return app.translator.trans(\"fof-linguist.admin.locales.all\");\n        }\n    }\n\n    actions(onchange) {\n        const items = new ItemList();\n\n        items.add(\n            \"apply\",\n            Button.component(\n                {\n                    type: \"button\",\n                    className: \"Button Button--primary\",\n                    loading: this.processing,\n                    disabled: !this.dirty,\n                    onclick: () => {\n                        this.saveString(onchange);\n                    },\n                },\n                app.translator.trans(\"fof-linguist.admin.buttons.apply\"),\n            ),\n        );\n\n        items.add(\n            \"reset\",\n            Button.component(\n                {\n                    type: \"button\",\n                    className: \"Button\",\n                    loading: this.processing,\n                    disabled: !this.dirty && !this.string,\n                    onclick: () => {\n                        this.deleteString(onchange);\n                    },\n                },\n                app.translator.trans(\"fof-linguist.admin.buttons.reset\"),\n            ),\n        );\n\n        if (this.originalString) {\n            items.add(\n                \"copy-original\",\n                Button.component(\n                    {\n                        type: \"button\",\n                        className: \"Button\",\n                        loading: this.processing,\n                        onclick: () => {\n                            this.value = this.originalString;\n                            this.dirty = true;\n                        },\n                    },\n                    app.translator.trans(\n                        \"fof-linguist.admin.buttons.copy-original\",\n                    ),\n                ),\n            );\n        }\n\n        return items;\n    }\n\n    saveString(onchange) {\n        if (!this.value) {\n            this.deleteString(onchange);\n\n            return;\n        }\n\n        if (!this.string) {\n            this.string = app.store.createRecord(\"fof-linguist-string\", {\n                attributes: {\n                    key: this.stringKey.key(),\n                    locale: this.localeKey,\n                    value: \"\",\n                },\n            });\n        }\n\n        this.string.data.attributes.value = this.value;\n\n        if (!this.string.locale()) delete this.string.data.attributes.locale;\n\n        this.processing = true;\n\n        this.string\n            .save(this.string.data.attributes)\n            .then(() => {\n                this.processing = false;\n                this.dirty = false;\n\n                onchange();\n\n                m.redraw();\n            })\n            .catch((err) => {\n                this.processing = false;\n\n                throw err;\n            });\n    }\n\n    deleteString(onchange) {\n        if (this.string) {\n            this.processing = true;\n\n            this.string\n                .delete()\n                .then(() => {\n                    this.processing = false;\n                    this.dirty = false;\n\n                    this.string = null;\n                    this.value = \"\";\n\n                    onchange();\n\n                    m.redraw();\n                })\n                .catch((err) => {\n                    this.processing = false;\n\n                    throw err;\n                });\n        } else {\n            this.value = \"\";\n            this.dirty = false;\n        }\n    }\n}\n","import Component, { ComponentAttrs } from \"flarum/common/Component\";\n\nimport StringLocale from \"./StringLocale\";\nimport localesAsArray from \"../utils/localesAsArray\";\nimport highlightMithril from \"../utils/highlightMithril\";\n\nimport type StringKeyModel from \"../models/StringKey\";\n\nexport interface IStringKeyAttrs extends ComponentAttrs {\n    stringKey: StringKeyModel;\n    highlight?: string;\n    onchange: () => void;\n}\n\nexport default class StringKey<\n    CustomAttrs extends IStringKeyAttrs = IStringKeyAttrs,\n> extends Component<CustomAttrs> {\n    view(): JSX.Element {\n        const { stringKey, highlight, onchange } = this.attrs;\n\n        return (\n            <div className=\"FoF-Linguist-Key\">\n                <div className=\"FoF-Linguist-Key-Code\">\n                    <code>{highlightMithril(stringKey.key(), highlight)}</code>\n                </div>\n                <div className=\"FoF-Linguist-Locales\">\n                    {localesAsArray().map((locale) => (\n                        <StringLocale\n                            locale={locale}\n                            stringKey={stringKey}\n                            highlight={highlight}\n                            onchange={onchange}\n                        />\n                    ))}\n                    <StringLocale\n                        locale={null}\n                        stringKey={stringKey}\n                        highlight={highlight}\n                        onchange={onchange}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import app from \"flarum/admin/app\";\n\nexport default function (namespace) {\n    const translation =\n        app.translator.translations[\n            \"fof-linguist.admin.known-namespace.\" + namespace\n        ];\n\n    if (translation) {\n        return translation;\n    }\n\n    return namespace;\n}\n","import app from \"flarum/admin/app\";\n\nexport default function (frontend) {\n    const translation =\n        app.translator.translations[\n            \"fof-linguist.admin.known-frontend.\" + frontend\n        ];\n\n    if (translation) {\n        return translation;\n    }\n\n    return frontend;\n}\n","export default function (operation, booleans) {\n    return booleans.reduce((a, b) => {\n        if (a === \"start\") {\n            return b;\n        }\n\n        if (operation === \"or\") {\n            return a || b;\n        }\n\n        return a && b;\n    }, \"start\");\n}\n","import app from \"flarum/admin/app\";\nimport Button from \"flarum/common/components/Button\";\nimport Dropdown from \"flarum/common/components/Dropdown\";\nimport Select from \"flarum/common/components/Select\";\nimport Alert from \"flarum/common/components/Alert\";\nimport LoadingModal from \"flarum/admin/components/LoadingModal\";\nimport extractText from \"flarum/common/utils/extractText\";\nimport localesAsArray from \"../utils/localesAsArray\";\nimport StringKey from \"../components/StringKey\";\nimport namespaceLabel from \"../utils/namespaceLabel\";\nimport frontendLabel from \"../utils/frontendLabel\";\nimport booleanCheck from \"../utils/booleanCheck\";\n\n/* global m */\n\nconst RESULTS_PER_PAGE = 20;\n\nexport default class StringsPage {\n    oninit(vnode) {\n        this.numberOfResultsToShow = RESULTS_PER_PAGE;\n\n        this.filters = Object.assign(\n            {\n                search: \"\",\n                withOwnTranslations: false,\n                missingTranslationsNegation: \"without\",\n                missingTranslationsType: \"any\",\n                missingTranslationsOperation: \"or\",\n                missingTranslationsInLocales: [],\n                forExtension: null,\n                frontend: null,\n            },\n            vnode.attrs.initialBrowseFilters || {},\n        );\n\n        this.results = [];\n\n        this.applyFilters();\n    }\n\n    view(vnode) {\n        const keys = this.results.slice(0, this.numberOfResultsToShow);\n\n        return [\n            // Additional divs are used to reduce Mithril redraws as much as possible when the conditional components appear\n            m(\"div\", this.cacheClearInstructions()),\n            m(\".FoF-Linguist-Filters\", [\n                m(\"input.FormControl\", {\n                    value: this.filters.search,\n                    oninput: (event) => {\n                        this.filters.search = event.target.value;\n                        this.applyFilters();\n                    },\n                    placeholder: app.translator.trans(\n                        \"fof-linguist.admin.filters.search\",\n                    ),\n                }),\n                Button.component(\n                    {\n                        className:\n                            \"Button\" +\n                            (this.filters.withOwnTranslations\n                                ? \" FoF-Linguist-Filter--Selected\"\n                                : \"\"),\n                        icon: `far fa-${this.filters.withOwnTranslations ? \"check-square\" : \"square\"}`,\n                        onclick: () => {\n                            this.filters.withOwnTranslations =\n                                !this.filters.withOwnTranslations;\n                            this.applyFilters();\n                        },\n                    },\n                    app.translator.trans(\n                        \"fof-linguist.admin.filters.with-own-translations\",\n                    ),\n                ),\n                Dropdown.component(\n                    {\n                        buttonClassName:\n                            \"Button\" +\n                            (this.filters.forExtension\n                                ? \" FoF-Linguist-Filter--Selected\"\n                                : \"\"),\n                        label: app.translator.trans(\n                            \"fof-linguist.admin.filters.for-extension\",\n                        ),\n                    },\n                    vnode.attrs.namespaces.map((namespace) =>\n                        Button.component(\n                            {\n                                className: \"Button\",\n                                icon: `far fa-${this.filters.forExtension === namespace.namespace ? \"dot-circle\" : \"circle\"}`,\n                                onclick: () => {\n                                    if (\n                                        this.filters.forExtension ===\n                                        namespace.namespace\n                                    ) {\n                                        this.filters.forExtension = null;\n                                    } else {\n                                        this.filters.forExtension =\n                                            namespace.namespace;\n                                    }\n\n                                    this.applyFilters();\n                                },\n                            },\n                            namespace.extension\n                                ? namespace.extension.extra[\"flarum-extension\"]\n                                      .title\n                                : namespaceLabel(namespace.namespace),\n                        ),\n                    ),\n                ),\n                Dropdown.component(\n                    {\n                        buttonClassName:\n                            \"Button\" +\n                            (this.filters.frontend\n                                ? \" FoF-Linguist-Filter--Selected\"\n                                : \"\"),\n                        label: app.translator.trans(\n                            \"fof-linguist.admin.filters.frontend\",\n                        ),\n                    },\n                    [\"_all_except_admin\", ...vnode.attrs.frontends].map(\n                        (frontend) =>\n                            Button.component(\n                                {\n                                    className: \"Button\",\n                                    icon: `far fa-${this.filters.frontend === frontend ? \"dot-circle\" : \"circle\"}`,\n                                    onclick: () => {\n                                        if (\n                                            this.filters.frontend === frontend\n                                        ) {\n                                            this.filters.frontend = null;\n                                        } else {\n                                            this.filters.frontend = frontend;\n                                        }\n\n                                        this.applyFilters();\n                                    },\n                                },\n                                frontend === \"_all_except_admin\"\n                                    ? app.translator.trans(\n                                          \"fof-linguist.admin.filters.frontend-all-except-admin\",\n                                      )\n                                    : frontendLabel(frontend),\n                            ),\n                    ),\n                ),\n                Dropdown.component(\n                    {\n                        buttonClassName:\n                            \"Button\" +\n                            (this.filters.missingTranslationsInLocales.length\n                                ? \" FoF-Linguist-Filter--Selected\"\n                                : \"\"),\n                        label: app.translator.trans(\n                            \"fof-linguist.admin.filters.missing\",\n                        ),\n                    },\n                    [\n                        m(\n                            \".FoF-Linguist-Missing-Filter\",\n                            {\n                                onclick(event) {\n                                    // Prevent closing the dropdown\n                                    event.stopPropagation();\n                                },\n                            },\n                            [\n                                Select.component({\n                                    value: this.filters\n                                        .missingTranslationsNegation,\n                                    onchange: (value) => {\n                                        this.filters.missingTranslationsNegation =\n                                            value;\n\n                                        if (\n                                            this.filters\n                                                .missingTranslationsInLocales\n                                                .length\n                                        ) {\n                                            this.applyFilters();\n                                        }\n                                    },\n                                    options: {\n                                        without: app.translator.trans(\n                                            \"fof-linguist.admin.filters.negation-options.without\",\n                                        ),\n                                        with: app.translator.trans(\n                                            \"fof-linguist.admin.filters.negation-options.with\",\n                                        ),\n                                    },\n                                }),\n                                Select.component({\n                                    value: this.filters.missingTranslationsType,\n                                    onchange: (value) => {\n                                        this.filters.missingTranslationsType =\n                                            value;\n\n                                        if (\n                                            this.filters\n                                                .missingTranslationsInLocales\n                                                .length\n                                        ) {\n                                            this.applyFilters();\n                                        }\n                                    },\n                                    options: {\n                                        any: app.translator.trans(\n                                            \"fof-linguist.admin.filters.type-options.any\",\n                                        ),\n                                        original: app.translator.trans(\n                                            \"fof-linguist.admin.filters.type-options.original\",\n                                        ),\n                                        own: app.translator.trans(\n                                            \"fof-linguist.admin.filters.type-options.own\",\n                                        ),\n                                    },\n                                }),\n                                m(\n                                    \"p\",\n                                    app.translator.trans(\n                                        \"fof-linguist.admin.filters.missing-middle-label\",\n                                    ),\n                                ),\n                                Select.component({\n                                    value: this.filters\n                                        .missingTranslationsOperation,\n                                    onchange: (value) => {\n                                        this.filters.missingTranslationsOperation =\n                                            value;\n\n                                        if (\n                                            this.filters\n                                                .missingTranslationsInLocales\n                                                .length\n                                        ) {\n                                            this.applyFilters();\n                                        }\n                                    },\n                                    options: {\n                                        or: app.translator.trans(\n                                            \"fof-linguist.admin.filters.operation-options.or\",\n                                        ),\n                                        and: app.translator.trans(\n                                            \"fof-linguist.admin.filters.operation-options.and\",\n                                        ),\n                                    },\n                                }),\n                            ],\n                        ),\n                        ...localesAsArray().map((locale) =>\n                            Button.component(\n                                {\n                                    className: \"Button\",\n                                    icon: `far fa-${this.filters.missingTranslationsInLocales.indexOf(locale.key) !== -1 ? \"check-square\" : \"square\"}`,\n                                    onclick: () => {\n                                        if (\n                                            this.filters.missingTranslationsInLocales.indexOf(\n                                                locale.key,\n                                            ) !== -1\n                                        ) {\n                                            this.filters.missingTranslationsInLocales =\n                                                this.filters.missingTranslationsInLocales.filter(\n                                                    (key) => key !== locale.key,\n                                                );\n                                        } else {\n                                            this.filters.missingTranslationsInLocales.push(\n                                                locale.key,\n                                            );\n                                        }\n\n                                        this.applyFilters();\n                                    },\n                                },\n                                locale.name + \" (\" + locale.key + \")\",\n                            ),\n                        ),\n                    ],\n                ),\n                Dropdown.component(\n                    {\n                        buttonClassName: \"Button\",\n                        label: app.translator.trans(\n                            \"fof-linguist.admin.filters.mass-edit\",\n                        ),\n                    },\n                    [\n                        Button.component(\n                            {\n                                icon: \"far fa-clone\",\n                                className: \"Button\",\n                                onclick: () => {\n                                    const strings = app.store\n                                        .all(\"fof-linguist-string\")\n                                        .filter((string) => {\n                                            const key = app.store.getById(\n                                                \"fof-linguist-string-key\",\n                                                string.key(),\n                                            );\n\n                                            return (\n                                                key &&\n                                                key.locales()[\n                                                    string.locale()\n                                                ] === string.value()\n                                            );\n                                        });\n\n                                    if (\n                                        confirm(\n                                            extractText(\n                                                app.translator.trans(\n                                                    \"fof-linguist.admin.buttons.delete-redundant-confirm\",\n                                                    {\n                                                        count:\n                                                            strings.length + \"\",\n                                                    },\n                                                ),\n                                            ),\n                                        )\n                                    ) {\n                                        if (strings.length === 0) {\n                                            return;\n                                        }\n\n                                        app.modal.show(LoadingModal);\n\n                                        Promise.all(\n                                            strings.map((string) =>\n                                                string.delete(),\n                                            ),\n                                        ).then(() => {\n                                            window.location.reload();\n                                        });\n                                    }\n                                },\n                            },\n                            app.translator.trans(\n                                \"fof-linguist.admin.buttons.delete-redundant\",\n                            ),\n                        ),\n                        Button.component(\n                            {\n                                icon: \"fas fa-trash\",\n                                className: \"Button\",\n                                onclick: () => {\n                                    const strings = app.store.all(\n                                        \"fof-linguist-string\",\n                                    );\n\n                                    if (\n                                        confirm(\n                                            extractText(\n                                                app.translator.trans(\n                                                    \"fof-linguist.admin.buttons.delete-all-confirm\",\n                                                    {\n                                                        count:\n                                                            strings.length + \"\",\n                                                    },\n                                                ),\n                                            ),\n                                        )\n                                    ) {\n                                        if (strings.length === 0) {\n                                            return;\n                                        }\n\n                                        app.modal.show(LoadingModal);\n\n                                        Promise.all(\n                                            strings.map((string) =>\n                                                string.delete(),\n                                            ),\n                                        ).then(() => {\n                                            window.location.reload();\n                                        });\n                                    }\n                                },\n                            },\n                            app.translator.trans(\n                                \"fof-linguist.admin.buttons.delete-all\",\n                            ),\n                        ),\n                    ],\n                ),\n            ]),\n            m(\n                \"div\",\n                keys.map((stringKey) =>\n                    m(StringKey, {\n                        key: stringKey.id(),\n                        stringKey,\n                        highlight: this.filters.search,\n                        onchange: () => {\n                            // We use the setting and not a local variable because we need to preserve state\n                            // if we navigate away and back to the Linguist page without refreshing the admin panel\n                            app.data.settings[\n                                \"fof.linguist.should-clear-cache\"\n                            ] = \"1\";\n                        },\n                    }),\n                ),\n            ),\n            m(\".FoF-Linguist-Results\", [\n                app.translator.trans(\"fof-linguist.admin.filters.results\", {\n                    shown: keys.length + \"\", // cast to string otherwise number isn't displayed\n                    total: this.results.length + \"\",\n                }),\n                \" \",\n                this.results.length > keys.length\n                    ? Button.component(\n                          {\n                              className: \"Button\",\n                              onclick: () => {\n                                  this.numberOfResultsToShow +=\n                                      RESULTS_PER_PAGE;\n                              },\n                          },\n                          app.translator.trans(\n                              \"fof-linguist.admin.buttons.load-more\",\n                          ),\n                      )\n                    : null,\n            ]),\n        ];\n    }\n\n    applyFilters() {\n        this.numberOfResultsToShow = RESULTS_PER_PAGE;\n\n        const keysWithCustomTranslations = app.store\n            .all(\"fof-linguist-string\")\n            .map((string) => string.key());\n\n        const keysWithCustomTranslationsIn = {};\n        localesAsArray().forEach((locale) => {\n            keysWithCustomTranslationsIn[locale.key] = app.store\n                .all(\"fof-linguist-string\")\n                .filter((string) => string.locale() === locale.key)\n                .map((string) => string.key());\n        });\n\n        let lowercaseSearch = \"\";\n\n        if (this.filters.search) {\n            lowercaseSearch = this.filters.search.toLowerCase();\n        }\n\n        this.results = app.store\n            .all(\"fof-linguist-string-key\")\n            .filter((key) => {\n                if (\n                    this.filters.withOwnTranslations &&\n                    keysWithCustomTranslations.indexOf(key.key()) === -1\n                ) {\n                    return false;\n                }\n\n                if (this.filters.missingTranslationsInLocales.length) {\n                    let operation = this.filters.missingTranslationsOperation;\n\n                    // Because the whole operation is reversed at the end based on with or without,\n                    // we actually need to make the opposite boolean computation on the \"has<x>\" variables\n                    if (\n                        this.filters.missingTranslationsNegation === \"without\"\n                    ) {\n                        operation = operation === \"or\" ? \"and\" : \"or\";\n                    }\n\n                    const hasOriginalTranslation = booleanCheck(\n                        operation,\n                        this.filters.missingTranslationsInLocales.map(\n                            (locale) => {\n                                return key.locales().hasOwnProperty(locale);\n                            },\n                        ),\n                    );\n                    const hasOwnTranslation = booleanCheck(\n                        operation,\n                        this.filters.missingTranslationsInLocales.map(\n                            (locale) => {\n                                return (\n                                    keysWithCustomTranslationsIn[\n                                        locale\n                                    ].indexOf(key.key()) !== -1\n                                );\n                            },\n                        ),\n                    );\n\n                    let matchesType = false;\n\n                    switch (this.filters.missingTranslationsType) {\n                        case \"any\":\n                            matchesType =\n                                hasOriginalTranslation || hasOwnTranslation;\n                            break;\n                        case \"original\":\n                            matchesType = hasOriginalTranslation;\n                            break;\n                        case \"own\":\n                            matchesType = hasOwnTranslation;\n                            break;\n                    }\n\n                    if (\n                        this.filters.missingTranslationsNegation === \"without\"\n                    ) {\n                        matchesType = !matchesType;\n                    }\n\n                    if (!matchesType) {\n                        return false;\n                    }\n                }\n\n                if (this.filters.forExtension) {\n                    if (\n                        key.key().indexOf(this.filters.forExtension + \".\") !== 0\n                    ) {\n                        return false;\n                    }\n                }\n\n                if (this.filters.frontend) {\n                    const parts = key.key().split(\".\");\n\n                    if (this.filters.frontend === \"_all_except_admin\") {\n                        // We will keep everything that isn't admin, including if it's a single level deep\n                        if (parts.length >= 2 && parts[1] === \"admin\") {\n                            return false;\n                        }\n                    } else {\n                        // Keep only parts with 2 levels or more where second level matches frontend\n                        if (\n                            parts.length < 2 ||\n                            parts[1] !== this.filters.frontend\n                        ) {\n                            return false;\n                        }\n                    }\n                }\n\n                if (lowercaseSearch) {\n                    if (\n                        key.key().toLowerCase().indexOf(lowercaseSearch) !== -1\n                    ) {\n                        return true;\n                    }\n\n                    const locales = key.locales();\n\n                    for (let locale in locales) {\n                        if (\n                            locales.hasOwnProperty(locale) &&\n                            locales[locale]\n                                .toLowerCase()\n                                .indexOf(lowercaseSearch) !== -1\n                        ) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                }\n\n                return true;\n            });\n\n        m.redraw();\n    }\n\n    cacheClearInstructions() {\n        // If debug is enabled, we hide the message here because even if we stop setting the flag,\n        // an older flag might still be present from before debug mode was enabled\n        if (app.data.debugEnabled) {\n            return null;\n        }\n\n        // Check for flag that says cache should be cleared\n        // This value is set both server-side and client-side in the onchange code above for immediate effect\n        if (app.data.settings[\"fof.linguist.should-clear-cache\"] !== \"1\") {\n            return null;\n        }\n\n        return Alert.component(\n            {\n                dismissible: false,\n                controls: [\n                    Button.component(\n                        {\n                            className: \"Button Button--link\",\n                            onclick() {\n                                // Same logic as in core StatusWidget\n                                app.modal.show(LoadingModal);\n\n                                app.request({\n                                    method: \"DELETE\",\n                                    url:\n                                        app.forum.attribute(\"apiUrl\") +\n                                        \"/cache\",\n                                }).then(() => window.location.reload());\n                            },\n                        },\n                        app.translator.trans(\n                            \"fof-linguist.admin.clear-cache.button\",\n                        ),\n                    ),\n                ],\n            },\n            app.translator.trans(\"fof-linguist.admin.clear-cache.text\"),\n        );\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","import app from \"flarum/admin/app\";\nimport Button from \"flarum/common/components/Button\";\nimport icon from \"flarum/common/helpers/icon\";\nimport localesAsArray from \"../utils/localesAsArray\";\nimport namespaceLabel from \"../utils/namespaceLabel\";\nimport frontendLabel from \"../utils/frontendLabel\";\n\n/* global m */\n\nexport default class CoveragePage {\n    oninit() {\n        this.columns = \"locale\";\n        this.showAllFrontends = false;\n        this.totalPercent = true;\n        this.locale = [];\n\n        const firstNonEnglishLocale = localesAsArray().find(\n            (locale) => locale.key !== \"en\",\n        );\n\n        if (firstNonEnglishLocale) {\n            this.locale = firstNonEnglishLocale.key;\n        }\n    }\n\n    view(vnode) {\n        let visibleFrontends = vnode.attrs.frontends.slice(0, 2);\n\n        if (this.showAllFrontends) {\n            visibleFrontends = vnode.attrs.frontends;\n        }\n\n        const { browseWithFilters } = vnode.attrs;\n\n        return [\n            m(\".FoF-Linguist-Filters\", [\n                m(\".ButtonGroup\", [\n                    Button.component(\n                        {\n                            className:\n                                \"Button\" + (this.totalPercent ? \" active\" : \"\"),\n                            onclick: () => {\n                                this.totalPercent = true;\n                            },\n                        },\n                        app.translator.trans(\n                            \"fof-linguist.admin.coverage.total-options.percent\",\n                        ),\n                    ),\n                    Button.component(\n                        {\n                            className:\n                                \"Button\" +\n                                (this.totalPercent ? \" \" : \" active\"),\n                            onclick: () => {\n                                this.totalPercent = false;\n                            },\n                        },\n                        app.translator.trans(\n                            \"fof-linguist.admin.coverage.total-options.count\",\n                        ),\n                    ),\n                ]),\n                m(\".ButtonGroup\", [\n                    Button.component(\n                        {\n                            className:\n                                \"Button\" +\n                                (this.columns === \"locale\" ? \" active\" : \"\"),\n                            onclick: () => {\n                                this.columns = \"locale\";\n                            },\n                        },\n                        app.translator.trans(\n                            \"fof-linguist.admin.coverage.column-options.locale\",\n                        ),\n                    ),\n                    Button.component(\n                        {\n                            className:\n                                \"Button\" +\n                                (this.columns === \"namespace\" ? \" active\" : \"\"),\n                            onclick: () => {\n                                this.columns = \"namespace\";\n                                this.showAllFrontends = false;\n                            },\n                        },\n                        app.translator.trans(\n                            \"fof-linguist.admin.coverage.column-options.namespace\",\n                        ),\n                    ),\n                ]),\n                this.columns === \"namespace\"\n                    ? m(\n                          \".ButtonGroup\",\n                          localesAsArray().map((locale) =>\n                              Button.component(\n                                  {\n                                      className:\n                                          \"Button\" +\n                                          (this.locale === locale.key\n                                              ? \" active\"\n                                              : \"\"),\n                                      onclick: () => {\n                                          if (this.locale !== locale.key) {\n                                              this.locale = locale.key;\n                                          }\n                                      },\n                                  },\n                                  locale.name + \" (\" + locale.key + \")\",\n                              ),\n                          ),\n                      )\n                    : null,\n            ]),\n            m(\"table.FoF-Linguist-Coverage\", [\n                m(\n                    \"thead\",\n                    m(\"tr\", [\n                        m(\n                            \"th\",\n                            app.translator.trans(\n                                \"fof-linguist.admin.coverage.columns.namespace\",\n                            ),\n                        ),\n                        this.columns === \"locale\"\n                            ? localesAsArray().map((locale) =>\n                                  m(\n                                      \"th\",\n                                      locale.name + \" (\" + locale.key + \")\",\n                                  ),\n                              )\n                            : [\n                                  this.showAllFrontends\n                                      ? visibleFrontends.map((frontend) =>\n                                            m(\"th\", frontendLabel(frontend)),\n                                        )\n                                      : [\n                                            m(\n                                                \"th\",\n                                                app.translator.trans(\n                                                    \"fof-linguist.admin.coverage.columns.all-except-admin\",\n                                                ),\n                                            ),\n                                            m(\"th\", frontendLabel(\"admin\")),\n                                            m(\n                                                \"th\",\n                                                Button.component(\n                                                    {\n                                                        className: \"Button\",\n                                                        onclick: () => {\n                                                            this.showAllFrontends = true;\n                                                        },\n                                                    },\n                                                    app.translator.trans(\n                                                        \"fof-linguist.admin.coverage.columns.all-frontends\",\n                                                    ),\n                                                ),\n                                            ),\n                                        ],\n                              ],\n                    ]),\n                ),\n                m(\"tbody\", [\n                    this.columns === \"locale\"\n                        ? m(\"tr\", [\n                              m(\"td\", [\n                                  m(\n                                      \"span.FoF-Linguist-Coverage-Extension-Icon.FoF-Linguist-Coverage-Namespace-Icon\",\n                                  ),\n                                  m(\n                                      \"span.FoF-Linguist-Coverage-Extension-Title\",\n                                      app.translator.trans(\n                                          \"fof-linguist.admin.coverage.all-namespaces\",\n                                      ),\n                                  ),\n                              ]),\n                              localesAsArray().map((locale) =>\n                                  m(\n                                      \"td\",\n                                      this.localeCoverage(\n                                          browseWithFilters,\n                                          locale.key,\n                                      ),\n                                  ),\n                              ),\n                          ])\n                        : null,\n                    vnode.attrs.namespaces.map((namespace) => {\n                        return m(\"tr\", [\n                            m(\n                                \"td\",\n                                namespace.extension\n                                    ? [\n                                          m(\n                                              \"span.FoF-Linguist-Coverage-Extension-Icon\",\n                                              {\n                                                  style: namespace.extension\n                                                      .icon,\n                                              },\n                                              namespace.extension.icon\n                                                  ? icon(\n                                                        namespace.extension.icon\n                                                            .name,\n                                                    )\n                                                  : \"\",\n                                          ),\n                                          m(\n                                              \"span.FoF-Linguist-Coverage-Extension-Title\",\n                                              namespace.extension.extra[\n                                                  \"flarum-extension\"\n                                              ].title,\n                                          ),\n                                      ]\n                                    : [\n                                          m(\n                                              \"span.FoF-Linguist-Coverage-Extension-Icon.FoF-Linguist-Coverage-Namespace-Icon\",\n                                          ),\n                                          m(\n                                              \"span.FoF-Linguist-Coverage-Extension-Title\",\n                                              namespaceLabel(\n                                                  namespace.namespace,\n                                              ),\n                                          ),\n                                      ],\n                            ),\n                            this.columns === \"locale\"\n                                ? localesAsArray().map((locale) =>\n                                      m(\n                                          \"td\",\n                                          this.localeCoverage(\n                                              browseWithFilters,\n                                              locale.key,\n                                              namespace.namespace,\n                                          ),\n                                      ),\n                                  )\n                                : [\n                                      this.showAllFrontends\n                                          ? visibleFrontends.map((frontend) =>\n                                                m(\n                                                    \"td\",\n                                                    this.prefixCoverage(\n                                                        browseWithFilters,\n                                                        namespace.namespace,\n                                                        frontend,\n                                                    ),\n                                                ),\n                                            )\n                                          : [\n                                                m(\n                                                    \"td\",\n                                                    this.prefixCoverage(\n                                                        browseWithFilters,\n                                                        namespace.namespace,\n                                                        \"_all_except_admin\",\n                                                    ),\n                                                ),\n                                                m(\n                                                    \"td\",\n                                                    this.prefixCoverage(\n                                                        browseWithFilters,\n                                                        namespace.namespace,\n                                                        \"admin\",\n                                                    ),\n                                                ),\n                                            ],\n                                  ],\n                        ]);\n                    }),\n                ]),\n            ]),\n        ];\n    }\n\n    prefixCoverage(browseWithFilters, namespace, frontend) {\n        if (!this.locale) {\n            return null;\n        }\n\n        return this.localeCoverage(\n            browseWithFilters,\n            this.locale,\n            namespace,\n            frontend,\n        );\n    }\n\n    localeCoverage(browseWithFilters, locale, namespace, frontend) {\n        const stringKeys = app.store\n            .all(\"fof-linguist-string-key\")\n            .filter((key) => {\n                if (!namespace) {\n                    return true;\n                }\n\n                const parts = key.key().split(\".\");\n\n                if (parts[0] !== namespace) {\n                    return false;\n                }\n\n                if (frontend === \"_all_except_admin\") {\n                    if (parts.length >= 2 && parts[1] === \"admin\") {\n                        return false;\n                    }\n                } else if (\n                    frontend &&\n                    (parts.length < 2 || parts[1] !== frontend)\n                ) {\n                    return false;\n                }\n\n                return true;\n            });\n\n        if (stringKeys.length === 0) {\n            return \"-\";\n        }\n\n        let customCount = 0;\n        let originalCount = 0;\n\n        stringKeys.forEach((stringKey) => {\n            const customString = app.store\n                .all(\"fof-linguist-string\")\n                .find(\n                    (string) =>\n                        string.key() === stringKey.key() &&\n                        string.locale() === locale,\n                );\n\n            if (customString) {\n                customCount++;\n            } else if (stringKey.locales().hasOwnProperty(locale)) {\n                originalCount++;\n            }\n        });\n\n        const percent = Math.round(\n            ((customCount + originalCount) / stringKeys.length) * 100,\n        );\n\n        let specialStyle;\n\n        if (percent === 100) {\n            specialStyle = \"full\";\n        } else if (percent < 5) {\n            specialStyle = \"low\";\n        }\n\n        let label;\n\n        if (this.totalPercent) {\n            label = app.translator.trans(\n                \"fof-linguist.admin.coverage.count.percent\",\n                {\n                    percent: percent + \"\", // Keeps zero as string\n                },\n            );\n        } else {\n            label = app.translator.trans(\n                \"fof-linguist.admin.coverage.count.total\",\n                {\n                    translated: customCount + originalCount + \"\", // Keeps zero as string\n                    total: stringKeys.length,\n                },\n            );\n        }\n\n        return m(\".FoF-Linguist-Coverage-Progress-Wrap\", [\n            m(\n                \".FoF-Linguist-Progress\",\n                {\n                    className: specialStyle\n                        ? \"FoF-Linguist-Progress--\" + specialStyle\n                        : \"\",\n                },\n                [\n                    m(\".FoF-Linguist-Progress-Bar\", {\n                        style: {\n                            width: Math.max(percent, 5) + \"%\", // Always show the progress bar even if very close to 0\n                        },\n                    }),\n                    m(\".FoF-Linguist-Progress-Label\", label),\n                    m(\n                        \".FoF-Linguist-Progress-More\",\n                        app.translator.trans(\n                            \"fof-linguist.admin.coverage.count.details\",\n                            {\n                                total: stringKeys.length,\n                                original: originalCount + \"\", // Cast to string to preserve zero\n                                custom: customCount + \"\",\n                            },\n                        ),\n                    ),\n                ],\n            ),\n            Button.component({\n                icon: \"fas fa-filter\",\n                className: \"Button Button--icon\",\n                onclick: () => {\n                    const options = {\n                        missingTranslationsInLocales: [locale],\n                    };\n\n                    if (namespace) {\n                        options.forExtension = namespace;\n                    }\n\n                    if (frontend) {\n                        options.frontend = frontend;\n                    }\n\n                    browseWithFilters(options);\n                },\n                title: app.translator.trans(\n                    \"fof-linguist.admin.coverage.apply-missing-filter\",\n                ),\n            }),\n        ]);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","import app from \"flarum/admin/app\";\nimport Select from \"flarum/common/components/Select\";\nimport Switch from \"flarum/common/components/Switch\";\nimport LinkButton from \"flarum/common/components/LinkButton\";\nimport localesAsArray from \"../utils/localesAsArray\";\nimport namespaceLabel from \"../utils/namespaceLabel\";\n\n/* global m */\n\nexport default class ExportPage {\n    oninit() {\n        this.locale = \"en\";\n        this.namespace = null;\n        this.includeOriginals = false;\n        this.includeAll = false;\n        this.loading = false;\n        this.output = \"\";\n\n        this.fetchOutput();\n    }\n\n    view(vnode) {\n        const localeOptions = {};\n\n        localesAsArray().forEach((locale) => {\n            localeOptions[locale.key] = locale.name + \" (\" + locale.key + \")\";\n        });\n\n        localeOptions.all = app.translator.trans(\n            \"fof-linguist.admin.export.locale-all\",\n        );\n\n        const namespaceOptions = {\n            _all: app.translator.trans(\n                \"fof-linguist.admin.export.namespace-all\",\n            ),\n        };\n\n        vnode.attrs.namespaces.forEach((namespace) => {\n            if (namespace.extension) {\n                namespaceOptions[namespace.namespace] =\n                    namespace.extension.extra[\"flarum-extension\"].title;\n            } else {\n                namespaceOptions[namespace.namespace] = namespaceLabel(\n                    namespace.namespace,\n                );\n            }\n        });\n\n        return [\n            m(\"h2\", app.translator.trans(\"fof-linguist.admin.export.title\")),\n            m(\n                \".Form-group\",\n                m(\n                    \".Alert\",\n                    app.translator.trans(\"fof-linguist.admin.export.warning\"),\n                ),\n            ),\n            m(\".Form-group\", [\n                m(\n                    \"label\",\n                    app.translator.trans(\"fof-linguist.admin.export.locale\"),\n                ),\n                Select.component({\n                    options: localeOptions,\n                    value: this.locale,\n                    onchange: (value) => {\n                        this.locale = value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m(\".Form-group\", [\n                m(\n                    \"label\",\n                    app.translator.trans(\"fof-linguist.admin.export.namespace\"),\n                ),\n                Select.component({\n                    options: namespaceOptions,\n                    value: this.namespace === null ? \"_all\" : this.namespace,\n                    onchange: (value) => {\n                        this.namespace = value === \"_all\" ? null : value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m(\".Form-group\", [\n                Switch.component(\n                    {\n                        state: this.includeOriginals,\n                        onchange: (value) => {\n                            this.includeOriginals = value;\n\n                            this.fetchOutput();\n                        },\n                    },\n                    app.translator.trans(\n                        \"fof-linguist.admin.export.include-originals\",\n                    ),\n                ),\n            ]),\n            m(\".Form-group\", [\n                Switch.component(\n                    {\n                        state: this.includeAll,\n                        onchange: (value) => {\n                            this.includeAll = value;\n\n                            this.fetchOutput();\n                        },\n                    },\n                    app.translator.trans(\n                        \"fof-linguist.admin.export.include-all\",\n                    ),\n                ),\n            ]),\n            m(\".Form-group\", [\n                m(\"label\", [\n                    app.translator.trans(\"fof-linguist.admin.export.output\"),\n                    \" \",\n                    LinkButton.component(\n                        {\n                            className: \"Button Button--primary\",\n                            href: this.exportUrl(),\n                            external: true,\n                            // If a namespace is selected, we use it as filename (language pack convention)\n                            // otherwise we use the locale as filename (extension convention)\n                            download: (this.namespace || this.locale) + \".yml\",\n                        },\n                        app.translator.trans(\n                            \"fof-linguist.admin.export.download\",\n                        ),\n                    ),\n                ]),\n                m(\"textarea.FormControl.FoF-Export-Textarea\", {\n                    readonly: true,\n                    value: this.output,\n                    rows: 10,\n                    placeholder: this.loading\n                        ? app.translator.trans(\n                              \"fof-linguist.admin.export.output-loading\",\n                          )\n                        : app.translator.trans(\n                              \"fof-linguist.admin.export.output-empty\",\n                          ),\n                }),\n            ]),\n        ];\n    }\n\n    exportUrl() {\n        return (\n            app.forum.attribute(\"apiUrl\") +\n            \"/fof/linguist/export?\" +\n            m.buildQueryString({\n                locale: this.locale,\n                namespace: this.namespace,\n                includeOriginals: this.includeOriginals ? \"1\" : \"0\",\n                includeAll: this.includeAll ? \"1\" : \"0\",\n            })\n        );\n    }\n\n    fetchOutput() {\n        this.loading = true;\n        this.output = \"\";\n\n        app.request({\n            method: \"GET\",\n            url: this.exportUrl(),\n            // Flarum doesn't support a raw to have the raw text response\n            // So we'll encode the response with JSON so Flarum can parse if afterwards\n            extract: (raw) => JSON.stringify(raw),\n        })\n            .then((output) => {\n                this.loading = false;\n                this.output = output;\n                m.redraw();\n            })\n            .catch((error) => {\n                this.loading = false;\n                m.redraw();\n                throw error;\n            });\n    }\n}\n","import app from \"flarum/admin/app\";\nimport Button from \"flarum/common/components/Button\";\nimport Select from \"flarum/common/components/Select\";\nimport Switch from \"flarum/common/components/Switch\";\nimport extractText from \"flarum/common/utils/extractText\";\nimport localesAsArray from \"../utils/localesAsArray\";\n\n/* global m */\n\nexport default class ImportPage {\n    oninit() {\n        this.locale = \"en\";\n        this.overrideExisting = true;\n        this.input = \"\";\n        this.loading = false;\n    }\n\n    view() {\n        const localeOptions = {};\n\n        localesAsArray().forEach((locale) => {\n            localeOptions[locale.key] = locale.name + \" (\" + locale.key + \")\";\n        });\n\n        localeOptions.all = app.translator.trans(\n            \"fof-linguist.admin.import.locale-all\",\n        );\n\n        return [\n            m(\"h2\", app.translator.trans(\"fof-linguist.admin.import.title\")),\n            m(\".Form-group\", [\n                m(\n                    \"label\",\n                    app.translator.trans(\"fof-linguist.admin.import.input\"),\n                ),\n                m(\"textarea.FormControl\", {\n                    value: this.input,\n                    oninput: (event) => {\n                        this.input = event.target.value;\n                    },\n                    rows: 10,\n                    placeholder: app.translator.trans(\n                        \"fof-linguist.admin.import.input-placeholder\",\n                    ),\n                }),\n            ]),\n            m(\".Form-group\", [\n                m(\n                    \"label\",\n                    app.translator.trans(\"fof-linguist.admin.import.locale\"),\n                ),\n                Select.component({\n                    options: localeOptions,\n                    value: this.locale,\n                    onchange: (value) => {\n                        this.locale = value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m(\".Form-group\", [\n                Switch.component(\n                    {\n                        state: this.overrideExisting,\n                        onchange: (value) => {\n                            this.overrideExisting = value;\n                        },\n                    },\n                    app.translator.trans(\n                        \"fof-linguist.admin.import.override-existing\",\n                    ),\n                ),\n            ]),\n            m(\n                \".Form-group\",\n                Button.component(\n                    {\n                        className: \"Button Button--primary\",\n                        onclick: () => {\n                            this.loading = true;\n\n                            app.request({\n                                method: \"POST\",\n                                url:\n                                    app.forum.attribute(\"apiUrl\") +\n                                    \"/fof/linguist/import\",\n                                body: {\n                                    input: this.input,\n                                    locale: this.locale,\n                                    ignoreExisting: !this.overrideExisting,\n                                },\n                            })\n                                .then((data) => {\n                                    this.loading = false;\n                                    m.redraw();\n\n                                    if (\n                                        confirm(\n                                            extractText(\n                                                app.translator.trans(\n                                                    this.overrideExisting\n                                                        ? \"fof-linguist.admin.import.results\"\n                                                        : \"fof-linguist.admin.import.results-with-ignore\",\n                                                    {\n                                                        imported:\n                                                            data.imported + \"\", // Cast to string to preserve zeros\n                                                        ignored:\n                                                            data.ignored + \"\",\n                                                        identical:\n                                                            data.identical + \"\",\n                                                    },\n                                                ),\n                                            ),\n                                        )\n                                    ) {\n                                        window.location.reload();\n                                    }\n                                })\n                                .catch((error) => {\n                                    this.loading = false;\n                                    m.redraw();\n                                    throw error;\n                                });\n                        },\n                        disabled: this.loading || !this.input,\n                        loading: this.loading,\n                    },\n                    app.translator.trans(\"fof-linguist.admin.import.submit\"),\n                ),\n            ),\n        ];\n    }\n}\n","import app from \"flarum/admin/app\";\nimport ExtensionPage from \"flarum/admin/components/ExtensionPage\";\nimport LoadingIndicator from \"flarum/common/components/LoadingIndicator\";\nimport StringsPage from \"./StringsPage\";\nimport CoveragePage from \"./CoveragePage\";\nimport ExportPage from \"./ExportPage\";\nimport ImportPage from \"./ImportPage\";\n\n/* global m */\n\nexport default class LinguistPage extends ExtensionPage {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tab = \"strings\";\n        this.ready = false;\n        this.namespaces = []; // First level of translation keys. Usually an extension ID, but also core and validation\n        this.frontends = [\"forum\", \"admin\", \"lib\", \"ref\", \"api\"]; // Second level of translation keys: forum, admin, ...\n        this.initialBrowseFilters = {};\n\n        Promise.all([\n            app\n                .request({\n                    method: \"GET\",\n                    url:\n                        app.forum.attribute(\"apiUrl\") + \"/fof/linguist/strings\",\n                })\n                .then((result) => {\n                    app.store.pushPayload(result);\n                }),\n            app\n                .request({\n                    method: \"GET\",\n                    url:\n                        app.forum.attribute(\"apiUrl\") +\n                        \"/fof/linguist/string-keys\",\n                })\n                .then((result) => {\n                    const keys = app.store.pushPayload(result);\n\n                    const namespaces = [];\n\n                    keys.forEach((key) => {\n                        const parts = key.key().split(\".\");\n\n                        const namespace = parts[0];\n\n                        if (\n                            [\"core\", \"validation\"].indexOf(namespace) === -1 &&\n                            namespaces.indexOf(namespace) === -1\n                        ) {\n                            namespaces.push(namespace);\n                        }\n\n                        if (parts.length > 1 && namespace !== \"validation\") {\n                            const frontend = parts[1];\n\n                            if (this.frontends.indexOf(frontend) === -1) {\n                                this.frontends.push(frontend);\n                            }\n                        }\n                    });\n\n                    namespaces.sort();\n\n                    this.namespaces = [\n                        {\n                            namespace: \"core\",\n                        },\n                        {\n                            namespace: \"validation\",\n                        },\n                        ...namespaces.map((namespace) => {\n                            // First we look if the namespace matches an extension ID, that's the most common naming\n                            let extension = app.data.extensions[namespace];\n\n                            // If that's unsuccessful, we'll look if the full package name was used as namespace\n                            if (!extension) {\n                                extension = Object.values(\n                                    app.data.extensions,\n                                ).find((extension) => {\n                                    const packageNameWithDash =\n                                        extension.name.replace(\"/\", \"-\");\n\n                                    return namespace === packageNameWithDash;\n                                });\n                            }\n\n                            return {\n                                namespace,\n                                extension,\n                            };\n                        }),\n                    ];\n                }),\n        ]).then(() => {\n            this.ready = true;\n            m.redraw();\n        });\n    }\n\n    content() {\n        return m(\n            \".ExtensionPage-settings\",\n            m(\".container\", [this.contentTab()]),\n        );\n    }\n\n    infoItems() {\n        const items = super.infoItems();\n\n        items.add(\n            \"linguist-tabs\",\n            m(\"ul.FoF-Linguist-Tabs\", [\n                m(\n                    \"li\",\n                    m(\n                        \"a\",\n                        {\n                            className: this.tab === \"strings\" ? \"active\" : \"\",\n                            onclick: () => {\n                                this.tab = \"strings\";\n                            },\n                        },\n                        app.translator.trans(\"fof-linguist.admin.tabs.strings\"),\n                    ),\n                ),\n                m(\n                    \"li\",\n                    m(\n                        \"a\",\n                        {\n                            className: this.tab === \"coverage\" ? \"active\" : \"\",\n                            onclick: () => {\n                                this.tab = \"coverage\";\n                            },\n                        },\n                        app.translator.trans(\n                            \"fof-linguist.admin.tabs.coverage\",\n                        ),\n                    ),\n                ),\n                m(\n                    \"li\",\n                    m(\n                        \"a\",\n                        {\n                            className: this.tab === \"export\" ? \"active\" : \"\",\n                            onclick: () => {\n                                this.tab = \"export\";\n                            },\n                        },\n                        app.translator.trans(\"fof-linguist.admin.tabs.export\"),\n                    ),\n                ),\n                m(\n                    \"li\",\n                    m(\n                        \"a\",\n                        {\n                            className: this.tab === \"import\" ? \"active\" : \"\",\n                            onclick: () => {\n                                this.tab = \"import\";\n                            },\n                        },\n                        app.translator.trans(\"fof-linguist.admin.tabs.import\"),\n                    ),\n                ),\n            ]),\n            100,\n        );\n\n        return items;\n    }\n\n    contentTab() {\n        if (!this.ready) {\n            return LoadingIndicator.component();\n        }\n\n        switch (this.tab) {\n            case \"strings\":\n                return m(StringsPage, {\n                    namespaces: this.namespaces,\n                    frontends: this.frontends,\n                    initialBrowseFilters: this.initialBrowseFilters,\n                });\n            case \"coverage\":\n                return m(CoveragePage, {\n                    namespaces: this.namespaces,\n                    frontends: this.frontends,\n                    browseWithFilters: (filters) => {\n                        this.initialBrowseFilters = filters;\n                        this.tab = \"strings\";\n                    },\n                });\n            case \"export\":\n                return m(ExportPage, {\n                    namespaces: this.namespaces,\n                });\n            case \"import\":\n                return m(ImportPage);\n        }\n\n        return null;\n    }\n}\n","import StringKey from \"./StringKey\";\nimport StringLocale from \"./StringLocale\";\n\nexport const components = {\n    StringKey,\n    StringLocale,\n};\n","import StringKey from \"./StringKey\";\nimport TextString from \"./TextString\";\n\nexport const models = {\n    StringKey,\n    TextString,\n};\n","import CoveragePage from \"./CoveragePage\";\nimport ExportPage from \"./ExportPage\";\nimport ImportPage from \"./ImportPage\";\nimport LinguistPage from \"./LinguistPage\";\nimport StringsPage from \"./StringsPage\";\n\nexport const pages = {\n    CoveragePage,\n    ExportPage,\n    ImportPage,\n    LinguistPage,\n    StringsPage,\n};\n","import booleanCheck from \"./booleanCheck\";\nimport frontendLabel from \"./frontendLabel\";\nimport highlightMithril from \"./highlightMithril\";\nimport localesAsArray from \"./localesAsArray\";\nimport namespaceLabel from \"./namespaceLabel\";\n\nexport const utils = {\n    booleanCheck,\n    frontendLabel,\n    highlightMithril,\n    localesAsArray,\n    namespaceLabel,\n};\n","import app from \"flarum/admin/app\";\nimport StringKey from \"./models/StringKey\";\nimport TextString from \"./models/TextString\";\nimport LinguistPage from \"./pages/LinguistPage\";\n\nexport * from \"./components\";\nexport * from \"./models\";\nexport * from \"./pages\";\nexport * from \"./utils\";\n\napp.initializers.add(\"fof-linguist\", (app) => {\n    app.store.models[\"fof-linguist-string-key\"] = StringKey;\n    app.store.models[\"fof-linguist-string\"] = TextString;\n\n    app.extensionData\n        .for(\"fof-linguist\")\n        .registerPage(LinguistPage)\n        .registerPermission(\n            {\n                icon: \"fas fa-italic\",\n                label: app.translator.trans(\n                    \"fof-linguist.admin.permissions.view_string_keys\",\n                ),\n                permission: \"viewStringKeys\",\n                allowGuest: true,\n            },\n            \"view\",\n        );\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","t","e","setPrototypeOf","bind","__proto__","_inheritsLoose","create","constructor","StringKey","_Model","_this","_len","arguments","length","args","Array","_key","apply","concat","Model","locales","TextString","locale","apiEndpoint","this","exists","data","id","englishFound","app","push","name","unshift","HIGHLIGHT_DELIMITER","string","highlight","lowercaseHighliht","toLowerCase","regex","RegExp","replace","split","map","text","m","StringLocale","_proto","oninit","vnode","stringKey","attrs","localeKey","originalString","all","find","dirty","processing","originalHasNewLine","keys","some","indexOf","inputType","view","_this2","placeholderText","trans","localeName","className","title","oninput","event","target","disabled","highlightMithril","actions","onchange","toArray","_this3","items","ItemList","add","Button","type","loading","onclick","saveString","deleteString","_this4","createRecord","attributes","save","then","redraw","err","_this5","_Component","_this$attrs","localesAsArray","Component","namespace","translations","frontend","operation","booleans","reduce","b","StringsPage","numberOfResultsToShow","filters","assign","search","withOwnTranslations","missingTranslationsNegation","missingTranslationsType","missingTranslationsOperation","missingTranslationsInLocales","forExtension","initialBrowseFilters","results","applyFilters","slice","cacheClearInstructions","placeholder","icon","Dropdown","buttonClassName","label","namespaces","extension","extra","namespaceLabel","frontends","frontendLabel","stopPropagation","Select","options","without","with","any","original","own","or","and","filter","strings","getById","confirm","extractText","count","show","LoadingModal","Promise","window","location","reload","settings","shown","total","keysWithCustomTranslations","keysWithCustomTranslationsIn","forEach","lowercaseSearch","hasOriginalTranslation","booleanCheck","hasOwnTranslation","matchesType","parts","debugEnabled","Alert","dismissible","controls","method","url","attribute","CoveragePage","columns","showAllFrontends","totalPercent","firstNonEnglishLocale","visibleFrontends","browseWithFilters","localeCoverage","style","prefixCoverage","stringKeys","customCount","originalCount","specialStyle","percent","Math","round","translated","width","max","custom","ExportPage","includeOriginals","includeAll","output","fetchOutput","localeOptions","namespaceOptions","_all","Switch","state","LinkButton","href","exportUrl","external","download","readonly","rows","buildQueryString","extract","raw","JSON","stringify","error","ImportPage","overrideExisting","input","body","ignoreExisting","imported","ignored","identical","LinguistPage","_ExtensionPage","tab","ready","result","pushPayload","sort","extensions","values","packageNameWithDash","content","contentTab","infoItems","LoadingIndicator","ExtensionPage","components","models","pages","utils","store","extensionData","registerPage","registerPermission","translator","permission","allowGuest"],"sourceRoot":""}