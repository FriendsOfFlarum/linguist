{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@fof/linguist/webpack/bootstrap","webpack://@fof/linguist/webpack/runtime/compat get default export","webpack://@fof/linguist/webpack/runtime/define property getters","webpack://@fof/linguist/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/linguist/webpack/runtime/make namespace object","webpack://@fof/linguist/external root \"flarum.core.compat['admin/app']\"","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/linguist/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/linguist/./src/admin/models/StringKey.js","webpack://@fof/linguist/./src/admin/models/TextString.js","webpack://@fof/linguist/external root \"flarum.core.compat['admin/components/ExtensionPage']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Dropdown']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Select']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@fof/linguist/external root \"flarum.core.compat['admin/components/LoadingModal']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@fof/linguist/./src/admin/utils/localesAsArray.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/linguist/./src/admin/utils/highlightMithril.js","webpack://@fof/linguist/./src/admin/components/StringLocale.js","webpack://@fof/linguist/./src/admin/components/StringKey.js","webpack://@fof/linguist/./src/admin/utils/namespaceLabel.js","webpack://@fof/linguist/./src/admin/utils/frontendLabel.js","webpack://@fof/linguist/./src/admin/utils/booleanCheck.js","webpack://@fof/linguist/./src/admin/pages/StringsPage.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/linguist/./src/admin/pages/CoveragePage.js","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@fof/linguist/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@fof/linguist/./src/admin/pages/ExportPage.js","webpack://@fof/linguist/./src/admin/pages/ImportPage.js","webpack://@fof/linguist/./src/admin/pages/LinguistPage.js","webpack://@fof/linguist/./src/admin/components/index.js","webpack://@fof/linguist/./src/admin/models/index.js","webpack://@fof/linguist/./src/admin/pages/index.js","webpack://@fof/linguist/./src/admin/utils/index.js","webpack://@fof/linguist/./src/admin/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Model from 'flarum/common/Model';\n\nexport default class StringKey extends Model {\n    key = Model.attribute('key');\n    locales = Model.attribute('locales');\n}\n","import Model from 'flarum/common/Model';\n\nexport default class TextString extends Model {\n    key = Model.attribute('key');\n    locale = Model.attribute('locale');\n    value = Model.attribute('value');\n\n    apiEndpoint() {\n        return '/fof/linguist/strings' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/ExtensionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Dropdown'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/LoadingModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","import app from 'flarum/admin/app';\n\nexport default function () {\n    let locales = [];\n\n    for (let key in app.data.locales) {\n        if (!app.data.locales.hasOwnProperty(key)) {\n            continue;\n        }\n\n        locales.push({\n            key,\n            name: app.data.locales[key],\n        });\n    }\n\n    return locales;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","/* global m */\n\nconst HIGHLIGHT_DELIMITER = '<fof-highlight>';\n\n// Takes a string and highlight a keyword with a span with mithril template\n// The output will be an array if a keyword is given\nexport default function (string, highlight) {\n    if (!highlight) {\n        return string;\n    }\n\n    const lowercaseHighliht = highlight.toLowerCase();\n\n    // Regex to match the highlighted work in a case-insensitive manner\n    const regex = new RegExp(lowercaseHighliht.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n\n    return string\n        .replace(regex, HIGHLIGHT_DELIMITER + '$&' + HIGHLIGHT_DELIMITER)\n        .split(HIGHLIGHT_DELIMITER)\n        .map(text => {\n            if (text.toLowerCase() === lowercaseHighliht) {\n                return m('span.FoF-Linguist-Highlight', text);\n            }\n\n            return text;\n        });\n}\n","import app from 'flarum/admin/app';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Button from 'flarum/common/components/Button';\nimport highlightMithril from '../utils/highlightMithril';\n\n/* global m */\n\nexport default class StringLocale {\n    oninit(vnode) {\n        this.stringKey = vnode.attrs.stringKey;\n        this.locale = vnode.attrs.locale;\n        this.localeKey = this.locale ? this.locale.key : null;\n        this.originalString = this.localeKey && this.stringKey.locales().hasOwnProperty(this.localeKey) ? this.stringKey.locales()[this.localeKey] : null;\n\n        this.string = app.store.all('fof-linguist-string').find(\n            string => string.key() === this.stringKey.key() && string.locale() === this.localeKey\n        );\n\n        this.value = this.string ? this.string.value() : '';\n        this.dirty = false;\n        this.processing = false;\n\n        // We check whether any original translation in any language has a newline\n        // By not hard-coding to English, this should work pretty well even if the fallback locale is modified,\n        // or if a text happens to not be available in the fallback language\n        const originalHasNewLine = Object.keys(this.stringKey.locales()).some(key => this.stringKey.locales()[key].indexOf('\\n') !== -1);\n\n        this.inputType = 'input';\n\n        // We will enable multi-line editing if the original has a newline, or if the current custom value already has one\n        if (originalHasNewLine || this.value.indexOf('\\n') !== -1) {\n            this.inputType = 'textarea';\n        }\n    }\n\n    view(vnode) {\n        const placeholderText = this.originalString ? this.originalString : '(' + app.translator.trans('fof-linguist.admin.placeholder.' + (this.localeKey ? 'not-translated' : 'all-locales')) + ')';\n\n        return m('.FoF-Linguist-Locale', [\n            m('label.FoF-Linguist-Label', this.localeName()),\n            m('.FoF-Linguist-Field', {\n                className: (this.value ? 'FoF-Linguist-Field--with-value' : '') + (this.originalString ? ' FoF-Linguist-Field--with-original-string' : ''),\n                title: placeholderText,\n            }, [\n                m('.FoF-Linguist-Field-Wrap', [\n                    m(this.inputType, {\n                        className: 'FormControl FoF-Linguist-Input',\n                        value: this.value,\n                        oninput: event => {\n                            this.value = event.target.value;\n                            this.dirty = true;\n\n                            // Remove dirty state if the user erased his text without saving\n                            if (!this.value && !this.string) {\n                                this.dirty = false;\n                            }\n                        },\n                        disabled: this.processing,\n                    }),\n                    m('.FoF-Linguist-Placeholder', [\n                        m('span.FoF-Linguist-Placeholder-Hint', app.translator.trans('fof-linguist.admin.placeholder.hint')),\n                        ' ',\n                        m('span', this.originalString ? highlightMithril(placeholderText, vnode.attrs.highlight) : placeholderText),\n                    ]),\n                ]),\n            ]),\n            m('.FoF-Linguist-Controls', this.actions(vnode.attrs.onchange).toArray()),\n        ]);\n    }\n\n    localeName() {\n        if (this.locale) {\n            return [this.locale.name + ' (', m('code', this.locale.key), ')'];\n        } else {\n            return app.translator.trans('fof-linguist.admin.locales.all');\n        }\n    }\n\n    actions(onchange) {\n        const items = new ItemList();\n\n        items.add('apply', Button.component({\n            type: 'button',\n            className: 'Button Button--primary',\n            loading: this.processing,\n            disabled: !this.dirty,\n            onclick: () => {\n                this.saveString(onchange);\n            },\n        }, app.translator.trans('fof-linguist.admin.buttons.apply')));\n\n        items.add('reset', Button.component({\n            type: 'button',\n            className: 'Button',\n            loading: this.processing,\n            disabled: !this.dirty && !this.string,\n            onclick: () => {\n                this.deleteString(onchange);\n            },\n        }, app.translator.trans('fof-linguist.admin.buttons.reset')));\n\n        if (this.originalString) {\n            items.add('copy-original', Button.component({\n                type: 'button',\n                className: 'Button',\n                loading: this.processing,\n                onclick: () => {\n                    this.value = this.originalString;\n                    this.dirty = true;\n                },\n            }, app.translator.trans('fof-linguist.admin.buttons.copy-original')));\n        }\n\n        return items;\n    }\n\n    saveString(onchange) {\n        if (!this.value) {\n            this.deleteString(onchange);\n\n            return;\n        }\n\n        if (!this.string) {\n            this.string = app.store.createRecord('fof-linguist-string', {\n                attributes: {\n                    key: this.stringKey.key(),\n                    locale: this.localeKey,\n                    value: '',\n                },\n            });\n        }\n\n        this.string.data.attributes.value = this.value;\n\n        if (!this.string.locale()) delete this.string.data.attributes.locale;\n\n        this.processing = true;\n\n        this.string.save(this.string.data.attributes).then(() => {\n            this.processing = false;\n            this.dirty = false;\n\n            onchange();\n\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n\n            throw err;\n        });\n    }\n\n    deleteString(onchange) {\n        if (this.string) {\n            this.processing = true;\n\n            this.string.delete().then(() => {\n                this.processing = false;\n                this.dirty = false;\n\n                this.string = null;\n                this.value = '';\n\n                onchange();\n\n                m.redraw();\n            }).catch(err => {\n                this.processing = false;\n\n                throw err;\n            });\n        } else {\n            this.value = '';\n            this.dirty = false;\n        }\n    }\n}\n","import StringLocale from '../components/StringLocale';\nimport localesAsArray from '../utils/localesAsArray';\nimport highlightMithril from '../utils/highlightMithril';\n\n/* global m */\n\nexport default class StringKey {\n    view(vnode) {\n        const {\n            stringKey,\n            highlight,\n            onchange,\n        } = vnode.attrs;\n\n        return m('.FoF-Linguist-Key', [\n            m('.FoF-Linguist-Key-Code', m('code', highlightMithril(stringKey.key(), highlight))),\n            m('.FoF-Linguist-Locales', [\n                ...localesAsArray().map(locale => m(StringLocale, {\n                    key: locale.key,\n                    locale,\n                    stringKey,\n                    highlight,\n                    onchange,\n                })),\n                m(StringLocale, {\n                    key: 'all',\n                    locale: null,\n                    stringKey,\n                    highlight,\n                    onchange,\n                }),\n            ]),\n        ]);\n    }\n}\n","import app from 'flarum/admin/app';\n\nexport default function (namespace) {\n    const translation = app.translator.translations['fof-linguist.admin.known-namespace.' + namespace];\n\n    if (translation) {\n        return translation;\n    }\n\n    return namespace;\n}\n","import app from 'flarum/admin/app';\n\nexport default function (frontend) {\n    const translation = app.translator.translations['fof-linguist.admin.known-frontend.' + frontend];\n\n    if (translation) {\n        return translation;\n    }\n\n    return frontend;\n}\n","export default function (operation, booleans) {\n    return booleans.reduce((a, b) => {\n        if (a === 'start') {\n            return b;\n        }\n\n        if (operation === 'or') {\n            return a || b;\n        }\n\n        return a && b;\n    }, 'start');\n}\n","import app from 'flarum/admin/app';\nimport Button from 'flarum/common/components/Button';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport Select from 'flarum/common/components/Select';\nimport Alert from 'flarum/common/components/Alert';\nimport LoadingModal from 'flarum/admin/components/LoadingModal';\nimport extractText from 'flarum/common/utils/extractText';\nimport localesAsArray from '../utils/localesAsArray';\nimport StringKey from '../components/StringKey';\nimport namespaceLabel from '../utils/namespaceLabel';\nimport frontendLabel from '../utils/frontendLabel';\nimport booleanCheck from '../utils/booleanCheck';\n\n/* global m */\n\nconst RESULTS_PER_PAGE = 20;\n\nexport default class StringsPage {\n    oninit(vnode) {\n        this.numberOfResultsToShow = RESULTS_PER_PAGE;\n\n        this.filters = Object.assign({\n            search: '',\n            withOwnTranslations: false,\n            missingTranslationsNegation: 'without',\n            missingTranslationsType: 'any',\n            missingTranslationsOperation: 'or',\n            missingTranslationsInLocales: [],\n            forExtension: null,\n            frontend: null,\n        }, vnode.attrs.initialBrowseFilters || {});\n\n        this.results = [];\n\n        this.applyFilters();\n    }\n\n    view(vnode) {\n        const keys = this.results.slice(0, this.numberOfResultsToShow);\n\n        return [\n            // Additional divs are used to reduce Mithril redraws as much as possible when the conditional components appear\n            m('div', app.data.settings['fof.linguist.should-clear-cache'] === '1' ? Alert.component({\n                dismissible: false,\n                controls: [Button.component({\n                    className: 'Button Button--link',\n                    onclick() {\n                        // Same logic as in core StatusWidget\n                        app.modal.show(LoadingModal);\n\n                        app.request({\n                            method: 'DELETE',\n                            url: app.forum.attribute('apiUrl') + '/cache',\n                        }).then(() => window.location.reload());\n                    },\n                }, app.translator.trans('fof-linguist.admin.clear-cache.button'))],\n            }, app.translator.trans('fof-linguist.admin.clear-cache.text')) : null),\n            m('.FoF-Linguist-Filters', [\n                m('input.FormControl', {\n                    value: this.filters.search,\n                    oninput: event => {\n                        this.filters.search = event.target.value;\n                        this.applyFilters();\n                    },\n                    placeholder: app.translator.trans('fof-linguist.admin.filters.search'),\n                }),\n                Button.component({\n                    className: 'Button' + (this.filters.withOwnTranslations ? ' FoF-Linguist-Filter--Selected' : ''),\n                    icon: `far fa-${this.filters.withOwnTranslations ? 'check-square' : 'square'}`,\n                    onclick: () => {\n                        this.filters.withOwnTranslations = !this.filters.withOwnTranslations;\n                        this.applyFilters();\n                    },\n                }, app.translator.trans('fof-linguist.admin.filters.with-own-translations')),\n                Dropdown.component({\n                    buttonClassName: 'Button' + (this.filters.forExtension ? ' FoF-Linguist-Filter--Selected' : ''),\n                    label: app.translator.trans('fof-linguist.admin.filters.for-extension'),\n                }, vnode.attrs.namespaces.map(\n                    namespace => Button.component({\n                        className: 'Button',\n                        icon: `far fa-${this.filters.forExtension === namespace.namespace ? 'dot-circle' : 'circle'}`,\n                        onclick: () => {\n                            if (this.filters.forExtension === namespace.namespace) {\n                                this.filters.forExtension = null;\n                            } else {\n                                this.filters.forExtension = namespace.namespace;\n                            }\n\n                            this.applyFilters();\n                        },\n                    }, namespace.extension ? namespace.extension.extra['flarum-extension'].title : namespaceLabel(namespace.namespace))\n                )),\n                Dropdown.component({\n                    buttonClassName: 'Button' + (this.filters.frontend ? ' FoF-Linguist-Filter--Selected' : ''),\n                    label: app.translator.trans('fof-linguist.admin.filters.frontend'),\n                }, [\n                    '_all_except_admin',\n                    ...vnode.attrs.frontends,\n                ].map(\n                    frontend => Button.component({\n                        className: 'Button',\n                        icon: `far fa-${this.filters.frontend === frontend ? 'dot-circle' : 'circle'}`,\n                        onclick: () => {\n                            if (this.filters.frontend === frontend) {\n                                this.filters.frontend = null;\n                            } else {\n                                this.filters.frontend = frontend;\n                            }\n\n                            this.applyFilters();\n                        },\n                    }, frontend === '_all_except_admin' ? app.translator.trans('fof-linguist.admin.filters.frontend-all-except-admin') : frontendLabel(frontend))\n                )),\n                Dropdown.component({\n                    buttonClassName: 'Button' + (this.filters.missingTranslationsInLocales.length ? ' FoF-Linguist-Filter--Selected' : ''),\n                    label: app.translator.trans('fof-linguist.admin.filters.missing'),\n                }, [\n                    m('.FoF-Linguist-Missing-Filter', {\n                        onclick(event) {\n                            // Prevent closing the dropdown\n                            event.stopPropagation();\n                        },\n                    }, [\n                        Select.component({\n                            value: this.filters.missingTranslationsNegation,\n                            onchange: value => {\n                                this.filters.missingTranslationsNegation = value;\n\n                                if (this.filters.missingTranslationsInLocales.length) {\n                                    this.applyFilters();\n                                }\n                            },\n                            options: {\n                                without: app.translator.trans('fof-linguist.admin.filters.negation-options.without'),\n                                with: app.translator.trans('fof-linguist.admin.filters.negation-options.with'),\n                            },\n                        }),\n                        Select.component({\n                            value: this.filters.missingTranslationsType,\n                            onchange: value => {\n                                this.filters.missingTranslationsType = value;\n\n                                if (this.filters.missingTranslationsInLocales.length) {\n                                    this.applyFilters();\n                                }\n                            },\n                            options: {\n                                any: app.translator.trans('fof-linguist.admin.filters.type-options.any'),\n                                original: app.translator.trans('fof-linguist.admin.filters.type-options.original'),\n                                own: app.translator.trans('fof-linguist.admin.filters.type-options.own'),\n                            },\n                        }),\n                        m('p', app.translator.trans('fof-linguist.admin.filters.missing-middle-label')),\n                        Select.component({\n                            value: this.filters.missingTranslationsOperation,\n                            onchange: value => {\n                                this.filters.missingTranslationsOperation = value;\n\n                                if (this.filters.missingTranslationsInLocales.length) {\n                                    this.applyFilters();\n                                }\n                            },\n                            options: {\n                                or: app.translator.trans('fof-linguist.admin.filters.operation-options.or'),\n                                and: app.translator.trans('fof-linguist.admin.filters.operation-options.and'),\n                            },\n                        }),\n                    ]),\n                    ...localesAsArray().map(\n                        locale => Button.component({\n                            className: 'Button',\n                            icon: `far fa-${this.filters.missingTranslationsInLocales.indexOf(locale.key) !== -1 ? 'check-square' : 'square'}`,\n                            onclick: () => {\n                                if (this.filters.missingTranslationsInLocales.indexOf(locale.key) !== -1) {\n                                    this.filters.missingTranslationsInLocales = this.filters.missingTranslationsInLocales.filter(key => key !== locale.key);\n                                } else {\n                                    this.filters.missingTranslationsInLocales.push(locale.key);\n                                }\n\n                                this.applyFilters();\n                            },\n                        }, locale.name + ' (' + locale.key + ')')\n                    ),\n                ]),\n                Dropdown.component({\n                    buttonClassName: 'Button',\n                    label: app.translator.trans('fof-linguist.admin.filters.mass-edit'),\n                }, [\n                    Button.component({\n                        icon: 'far fa-clone',\n                        className: 'Button',\n                        onclick: () => {\n                            const strings = app.store.all('fof-linguist-string').filter(string => {\n                                const key = app.store.getById('fof-linguist-string-key', string.key());\n\n                                return key && key.locales()[string.locale()] === string.value();\n                            });\n\n                            if (confirm(extractText(app.translator.trans('fof-linguist.admin.buttons.delete-redundant-confirm', {\n                                count: strings.length + '',\n                            })))) {\n                                if (strings.length === 0) {\n                                    return;\n                                }\n\n                                app.modal.show(LoadingModal);\n\n                                Promise.all(strings.map(string => string.delete())).then(() => {\n                                    window.location.reload();\n                                });\n                            }\n                        },\n                    }, app.translator.trans('fof-linguist.admin.buttons.delete-redundant')),\n                    Button.component({\n                        icon: 'fas fa-trash',\n                        className: 'Button',\n                        onclick: () => {\n                            const strings = app.store.all('fof-linguist-string');\n\n                            if (confirm(extractText(app.translator.trans('fof-linguist.admin.buttons.delete-all-confirm', {\n                                count: strings.length + '',\n                            })))) {\n                                if (strings.length === 0) {\n                                    return;\n                                }\n\n                                app.modal.show(LoadingModal);\n\n                                Promise.all(strings.map(string => string.delete())).then(() => {\n                                    window.location.reload();\n                                });\n                            }\n                        },\n                    }, app.translator.trans('fof-linguist.admin.buttons.delete-all')),\n                ]),\n            ]),\n            m('div', keys.map(stringKey => m(StringKey, {\n                key: stringKey.id(),\n                stringKey,\n                highlight: this.filters.search,\n                onchange: () => {\n                    // We use the setting and not a local variable because we need to preserve state\n                    // if we navigate away and back to the Linguist page without refreshing the admin panel\n                    app.data.settings['fof.linguist.should-clear-cache'] = '1';\n                },\n            }))),\n            m('.FoF-Linguist-Results', [\n                app.translator.trans('fof-linguist.admin.filters.results', {\n                    shown: keys.length + '', // cast to string otherwise number isn't displayed\n                    total: this.results.length + '',\n                }),\n                ' ',\n                (this.results.length > keys.length ? Button.component({\n                    className: 'Button',\n                    onclick: () => {\n                        this.numberOfResultsToShow += RESULTS_PER_PAGE;\n                    },\n                }, app.translator.trans('fof-linguist.admin.buttons.load-more')) : null),\n            ]),\n        ];\n    }\n\n    applyFilters() {\n        this.numberOfResultsToShow = RESULTS_PER_PAGE;\n\n        const keysWithCustomTranslations = app.store.all('fof-linguist-string').map(string => string.key());\n\n        const keysWithCustomTranslationsIn = {};\n        localesAsArray().forEach(locale => {\n            keysWithCustomTranslationsIn[locale.key] = app.store.all('fof-linguist-string')\n                .filter(string => string.locale() === locale.key)\n                .map(string => string.key());\n        });\n\n        let lowercaseSearch = '';\n\n        if (this.filters.search) {\n            lowercaseSearch = this.filters.search.toLowerCase();\n        }\n\n        this.results = app.store.all('fof-linguist-string-key').filter(key => {\n            if (this.filters.withOwnTranslations && keysWithCustomTranslations.indexOf(key.key()) === -1) {\n                return false;\n            }\n\n            if (this.filters.missingTranslationsInLocales.length) {\n                let operation = this.filters.missingTranslationsOperation;\n\n                // Because the whole operation is reversed at the end based on with or without,\n                // we actually need to make the opposite boolean computation on the \"has<x>\" variables\n                if (this.filters.missingTranslationsNegation === 'without') {\n                    operation = operation === 'or' ? 'and' : 'or';\n                }\n\n                const hasOriginalTranslation = booleanCheck(operation, this.filters.missingTranslationsInLocales.map(locale => {\n                    return key.locales().hasOwnProperty(locale);\n                }));\n                const hasOwnTranslation = booleanCheck(operation, this.filters.missingTranslationsInLocales.map(locale => {\n                    return keysWithCustomTranslationsIn[locale].indexOf(key.key()) !== -1;\n                }));\n\n                let matchesType = false;\n\n                switch (this.filters.missingTranslationsType) {\n                    case 'any':\n                        matchesType = hasOriginalTranslation || hasOwnTranslation;\n                        break;\n                    case 'original':\n                        matchesType = hasOriginalTranslation;\n                        break;\n                    case 'own':\n                        matchesType = hasOwnTranslation;\n                        break;\n                }\n\n                if (this.filters.missingTranslationsNegation === 'without') {\n                    matchesType = !matchesType;\n                }\n\n                if (!matchesType) {\n                    return false;\n                }\n            }\n\n            if (this.filters.forExtension) {\n                if (key.key().indexOf(this.filters.forExtension + '.') !== 0) {\n                    return false;\n                }\n            }\n\n            if (this.filters.frontend) {\n                const parts = key.key().split('.');\n\n                if (this.filters.frontend === '_all_except_admin') {\n                    // We will keep everything that isn't admin, including if it's a single level deep\n                    if (parts.length >= 2 && parts[1] === 'admin') {\n                        return false;\n                    }\n                } else {\n                    // Keep only parts with 2 levels or more where second level matches frontend\n                    if (parts.length < 2 || parts[1] !== this.filters.frontend) {\n                        return false;\n                    }\n                }\n            }\n\n            if (lowercaseSearch) {\n                if (key.key().toLowerCase().indexOf(lowercaseSearch) !== -1) {\n                    return true;\n                }\n\n                const locales = key.locales();\n\n                for (let locale in locales) {\n                    if (locales.hasOwnProperty(locale) && locales[locale].toLowerCase().indexOf(lowercaseSearch) !== -1) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n\n            return true;\n        });\n\n        m.redraw();\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","import app from 'flarum/admin/app';\nimport Button from 'flarum/common/components/Button';\nimport icon from 'flarum/common/helpers/icon';\nimport localesAsArray from '../utils/localesAsArray';\nimport namespaceLabel from '../utils/namespaceLabel';\nimport frontendLabel from '../utils/frontendLabel';\n\n/* global m */\n\nexport default class CoveragePage {\n    oninit() {\n        this.columns = 'locale';\n        this.showAllFrontends = false;\n        this.totalPercent = true;\n        this.locale = [];\n\n        const firstNonEnglishLocale = localesAsArray().find(locale => locale.key !== 'en');\n\n        if (firstNonEnglishLocale) {\n            this.locale = firstNonEnglishLocale.key;\n        }\n    }\n\n    view(vnode) {\n        let visibleFrontends = vnode.attrs.frontends.slice(0, 2);\n\n        if (this.showAllFrontends) {\n            visibleFrontends = vnode.attrs.frontends;\n        }\n\n        const {browseWithFilters} = vnode.attrs;\n\n        return [\n            m('.FoF-Linguist-Filters', [\n                m('.ButtonGroup', [\n                    Button.component({\n                        className: 'Button' + (this.totalPercent ? ' active' : ''),\n                        onclick: () => {\n                            this.totalPercent = true;\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.total-options.percent')),\n                    Button.component({\n                        className: 'Button' + (this.totalPercent ? ' ' : ' active'),\n                        onclick: () => {\n                            this.totalPercent = false;\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.total-options.count')),\n                ]),\n                m('.ButtonGroup', [\n                    Button.component({\n                        className: 'Button' + (this.columns === 'locale' ? ' active' : ''),\n                        onclick: () => {\n                            this.columns = 'locale';\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.column-options.locale')),\n                    Button.component({\n                        className: 'Button' + (this.columns === 'namespace' ? ' active' : ''),\n                        onclick: () => {\n                            this.columns = 'namespace';\n                            this.showAllFrontends = false;\n                        },\n                    }, app.translator.trans('fof-linguist.admin.coverage.column-options.namespace')),\n                ]),\n                this.columns === 'namespace' ? m('.ButtonGroup', localesAsArray().map(\n                    locale => Button.component({\n                        className: 'Button' + (this.locale === locale.key ? ' active' : ''),\n                        onclick: () => {\n                            if (this.locale !== locale.key) {\n                                this.locale = locale.key;\n                            }\n                        },\n                    }, locale.name + ' (' + locale.key + ')')\n                )) : null,\n            ]),\n            m('table.FoF-Linguist-Coverage', [\n                m('thead', m('tr', [\n                    m('th', app.translator.trans('fof-linguist.admin.coverage.columns.namespace')),\n                    this.columns === 'locale' ? localesAsArray().map(locale => m('th', locale.name + ' (' + locale.key + ')')) : [\n                        this.showAllFrontends ? visibleFrontends.map(frontend => m('th', frontendLabel(frontend))) : [\n                            m('th', app.translator.trans('fof-linguist.admin.coverage.columns.all-except-admin')),\n                            m('th', frontendLabel('admin')),\n                            m('th', Button.component({\n                                className: 'Button',\n                                onclick: () => {\n                                    this.showAllFrontends = true;\n                                },\n                            }, app.translator.trans('fof-linguist.admin.coverage.columns.all-frontends'))),\n                        ],\n                    ],\n                ])),\n                m('tbody', [\n                    this.columns === 'locale' ? m('tr', [\n                        m('td', [\n                            m('span.FoF-Linguist-Coverage-Extension-Icon.FoF-Linguist-Coverage-Namespace-Icon'),\n                            m('span.FoF-Linguist-Coverage-Extension-Title', app.translator.trans('fof-linguist.admin.coverage.all-namespaces')),\n                        ]),\n                        localesAsArray().map(locale => m('td', this.localeCoverage(browseWithFilters, locale.key))),\n                    ]) : null,\n                    vnode.attrs.namespaces.map(namespace => {\n                        return m('tr', [\n                            m('td', namespace.extension ? [\n                                m('span.FoF-Linguist-Coverage-Extension-Icon', {\n                                    style: namespace.extension.icon,\n                                }, namespace.extension.icon ? icon(namespace.extension.icon.name) : ''),\n                                m('span.FoF-Linguist-Coverage-Extension-Title', namespace.extension.extra['flarum-extension'].title),\n                            ] : [\n                                m('span.FoF-Linguist-Coverage-Extension-Icon.FoF-Linguist-Coverage-Namespace-Icon'),\n                                m('span.FoF-Linguist-Coverage-Extension-Title', namespaceLabel(namespace.namespace)),\n                            ]),\n                            this.columns === 'locale' ? localesAsArray().map(locale => m('td', this.localeCoverage(browseWithFilters, locale.key, namespace.namespace))) : [\n                                this.showAllFrontends ?\n                                    visibleFrontends.map(frontend => m('td', this.prefixCoverage(browseWithFilters, namespace.namespace, frontend))) : [\n                                        m('td', this.prefixCoverage(browseWithFilters, namespace.namespace, '_all_except_admin')),\n                                        m('td', this.prefixCoverage(browseWithFilters, namespace.namespace, 'admin')),\n                                    ],\n                            ],\n                        ]);\n                    }),\n                ]),\n            ]),\n        ];\n    }\n\n    prefixCoverage(browseWithFilters, namespace, frontend) {\n        if (!this.locale) {\n            return null;\n        }\n\n        return this.localeCoverage(browseWithFilters, this.locale, namespace, frontend);\n    }\n\n    localeCoverage(browseWithFilters, locale, namespace, frontend) {\n        const stringKeys = app.store.all('fof-linguist-string-key').filter(key => {\n            if (!namespace) {\n                return true;\n            }\n\n            const parts = key.key().split('.');\n\n            if (parts[0] !== namespace) {\n                return false;\n            }\n\n            if (frontend === '_all_except_admin') {\n                if (parts.length >= 2 && parts[1] === 'admin') {\n                    return false;\n                }\n            } else if (frontend && (parts.length < 2 || parts[1] !== frontend)) {\n                return false;\n            }\n\n            return true;\n        });\n\n        if (stringKeys.length === 0) {\n            return '-';\n        }\n\n        let customCount = 0;\n        let originalCount = 0;\n\n        stringKeys.forEach(stringKey => {\n            const customString = app.store.all('fof-linguist-string').find(\n                string => string.key() === stringKey.key() && string.locale() === locale\n            );\n\n            if (customString) {\n                customCount++;\n            } else if (stringKey.locales().hasOwnProperty(locale)) {\n                originalCount++;\n            }\n        });\n\n        const percent = Math.round(((customCount + originalCount) / stringKeys.length) * 100);\n\n        let specialStyle;\n\n        if (percent === 100) {\n            specialStyle = 'full';\n        } else if (percent < 5) {\n            specialStyle = 'low';\n        }\n\n        let label;\n\n        if (this.totalPercent) {\n            label = app.translator.trans('fof-linguist.admin.coverage.count.percent', {\n                percent: percent + '', // Keeps zero as string\n            });\n        } else {\n            label = app.translator.trans('fof-linguist.admin.coverage.count.total', {\n                translated: (customCount + originalCount) + '', // Keeps zero as string\n                total: stringKeys.length,\n            });\n        }\n\n        return m('.FoF-Linguist-Coverage-Progress-Wrap', [\n            m('.FoF-Linguist-Progress', {\n                className: specialStyle ? 'FoF-Linguist-Progress--' + specialStyle : '',\n            }, [\n                m('.FoF-Linguist-Progress-Bar', {\n                    style: {\n                        width: Math.max(percent, 5) + '%', // Always show the progress bar even if very close to 0\n                    },\n                }),\n                m('.FoF-Linguist-Progress-Label', label),\n                m('.FoF-Linguist-Progress-More', app.translator.trans('fof-linguist.admin.coverage.count.details', {\n                    total: stringKeys.length,\n                    original: originalCount + '', // Cast to string to preserve zero\n                    custom: customCount + '',\n                })),\n            ]),\n            Button.component({\n                icon: 'fas fa-filter',\n                className: 'Button Button--icon',\n                onclick: () => {\n                    const options = {\n                        missingTranslationsInLocales: [locale],\n                    };\n\n                    if (namespace) {\n                        options.forExtension = namespace;\n                    }\n\n                    if (frontend) {\n                        options.frontend = frontend;\n                    }\n\n                    browseWithFilters(options);\n                },\n                title: app.translator.trans('fof-linguist.admin.coverage.apply-missing-filter'),\n            }),\n        ]);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","import app from 'flarum/admin/app';\nimport Select from 'flarum/common/components/Select';\nimport Switch from 'flarum/common/components/Switch';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport localesAsArray from '../utils/localesAsArray';\nimport namespaceLabel from '../utils/namespaceLabel';\n\n/* global m */\n\nexport default class ExportPage {\n    oninit() {\n        this.locale = 'en';\n        this.namespace = null;\n        this.includeOriginals = false;\n        this.includeAll = false;\n        this.loading = false;\n        this.output = '';\n\n        this.fetchOutput();\n    }\n\n    view(vnode) {\n        const localeOptions = {};\n\n        localesAsArray().forEach(locale => {\n            localeOptions[locale.key] = locale.name + ' (' + locale.key + ')';\n        });\n\n        localeOptions.all = app.translator.trans('fof-linguist.admin.export.locale-all')\n\n        const namespaceOptions = {\n            _all: app.translator.trans('fof-linguist.admin.export.namespace-all'),\n        };\n\n        vnode.attrs.namespaces.forEach(namespace => {\n            if (namespace.extension) {\n                namespaceOptions[namespace.namespace] = namespace.extension.extra['flarum-extension'].title;\n            } else {\n                namespaceOptions[namespace.namespace] = namespaceLabel(namespace.namespace);\n\n            }\n        });\n\n        return [\n            m('h2', app.translator.trans('fof-linguist.admin.export.title')),\n            m('.Form-group', m('.Alert', app.translator.trans('fof-linguist.admin.export.warning'))),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.export.locale')),\n                Select.component({\n                    options: localeOptions,\n                    value: this.locale,\n                    onchange: value => {\n                        this.locale = value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.export.namespace')),\n                Select.component({\n                    options: namespaceOptions,\n                    value: this.namespace === null ? '_all' : this.namespace,\n                    onchange: value => {\n                        this.namespace = value === '_all' ? null : value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m('.Form-group', [\n                Switch.component({\n                    state: this.includeOriginals,\n                    onchange: value => {\n                        this.includeOriginals = value;\n\n                        this.fetchOutput();\n                    }\n                }, app.translator.trans('fof-linguist.admin.export.include-originals')),\n            ]),\n            m('.Form-group', [\n                Switch.component({\n                    state: this.includeAll,\n                    onchange: value => {\n                        this.includeAll = value;\n\n                        this.fetchOutput();\n                    }\n                }, app.translator.trans('fof-linguist.admin.export.include-all')),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    app.translator.trans('fof-linguist.admin.export.output'),\n                    ' ',\n                    LinkButton.component({\n                        className: 'Button Button--primary',\n                        href: this.exportUrl(),\n                        external: true,\n                        // If a namespace is selected, we use it as filename (language pack convention)\n                        // otherwise we use the locale as filename (extension convention)\n                        download: (this.namespace || this.locale) + '.yml',\n                    }, app.translator.trans('fof-linguist.admin.export.download')),\n                ]),\n                m('textarea.FormControl.FoF-Export-Textarea', {\n                    readonly: true,\n                    value: this.output,\n                    rows: 10,\n                    placeholder: this.loading ? app.translator.trans('fof-linguist.admin.export.output-loading') : app.translator.trans('fof-linguist.admin.export.output-empty'),\n                }),\n            ]),\n        ];\n    }\n\n    exportUrl() {\n        return app.forum.attribute('apiUrl') + '/fof/linguist/export?' + m.buildQueryString({\n            locale: this.locale,\n            namespace: this.namespace,\n            includeOriginals: this.includeOriginals ? '1' : '0',\n            includeAll: this.includeAll ? '1' : '0',\n        });\n    }\n\n    fetchOutput() {\n        this.loading = true;\n        this.output = '';\n\n        app.request({\n            method: 'GET',\n            url: this.exportUrl(),\n            // Flarum doesn't support a raw to have the raw text response\n            // So we'll encode the response with JSON so Flarum can parse if afterwards\n            extract: raw => JSON.stringify(raw),\n        }).then(output => {\n            this.loading = false;\n            this.output = output;\n            m.redraw();\n        }).catch(error => {\n            this.loading = false;\n            m.redraw();\n            throw error;\n        });\n    }\n}\n","import app from 'flarum/admin/app';\nimport Button from 'flarum/common/components/Button';\nimport Select from 'flarum/common/components/Select';\nimport Switch from 'flarum/common/components/Switch';\nimport extractText from 'flarum/common/utils/extractText';\nimport localesAsArray from '../utils/localesAsArray';\n\n/* global m */\n\nexport default class ImportPage {\n    oninit() {\n        this.locale = 'en';\n        this.overrideExisting = true;\n        this.input = '';\n        this.loading = false;\n    }\n\n    view() {\n        const localeOptions = {};\n\n        localesAsArray().forEach(locale => {\n            localeOptions[locale.key] = locale.name + ' (' + locale.key + ')';\n        });\n\n        localeOptions.all = app.translator.trans('fof-linguist.admin.import.locale-all')\n\n        return [\n            m('h2', app.translator.trans('fof-linguist.admin.import.title')),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.import.input')),\n                m('textarea.FormControl', {\n                    value: this.input,\n                    oninput: event => {\n                        this.input = event.target.value;\n                    },\n                    rows: 10,\n                    placeholder: app.translator.trans('fof-linguist.admin.import.input-placeholder'),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans('fof-linguist.admin.import.locale')),\n                Select.component({\n                    options: localeOptions,\n                    value: this.locale,\n                    onchange: value => {\n                        this.locale = value;\n\n                        this.fetchOutput();\n                    },\n                }),\n            ]),\n            m('.Form-group', [\n                Switch.component({\n                    state: this.overrideExisting,\n                    onchange: value => {\n                        this.overrideExisting = value;\n                    }\n                }, app.translator.trans('fof-linguist.admin.import.override-existing')),\n            ]),\n            m('.Form-group', Button.component({\n                className: 'Button Button--primary',\n                onclick: () => {\n                    this.loading = true;\n\n                    app.request({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + '/fof/linguist/import',\n                        body: {\n                            input: this.input,\n                            locale: this.locale,\n                            ignoreExisting: !this.overrideExisting,\n                        },\n                    }).then(data => {\n                        this.loading = false;\n                        m.redraw();\n\n                        if (confirm(extractText(app.translator.trans(this.overrideExisting ? 'fof-linguist.admin.import.results' : 'fof-linguist.admin.import.results-with-ignore', {\n                            imported: data.imported + '', // Cast to string to preserve zeros\n                            ignored: data.ignored + '',\n                            identical: data.identical + '',\n                        })))) {\n                            window.location.reload();\n                        }\n                    }).catch(error => {\n                        this.loading = false;\n                        m.redraw();\n                        throw error;\n                    });\n                },\n                disabled: this.loading || !this.input,\n                loading: this.loading,\n            }, app.translator.trans('fof-linguist.admin.import.submit'))),\n        ];\n    }\n}\n","import app from 'flarum/admin/app';\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport StringsPage from './StringsPage';\nimport CoveragePage from './CoveragePage';\nimport ExportPage from './ExportPage';\nimport ImportPage from './ImportPage';\n\n/* global m */\n\nexport default class LinguistPage extends ExtensionPage {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tab = 'strings';\n        this.ready = false;\n        this.namespaces = []; // First level of translation keys. Usually an extension ID, but also core and validation\n        this.frontends = [\n            'forum',\n            'admin',\n            'lib',\n            'ref',\n            'api',\n        ]; // Second level of translation keys: forum, admin, ...\n        this.initialBrowseFilters = {};\n\n        Promise.all([\n            app.request({\n                method: 'GET',\n                url: app.forum.attribute('apiUrl') + '/fof/linguist/strings',\n            }).then(result => {\n                app.store.pushPayload(result);\n            }),\n            app.request({\n                method: 'GET',\n                url: app.forum.attribute('apiUrl') + '/fof/linguist/string-keys',\n            }).then(result => {\n                const keys = app.store.pushPayload(result);\n\n                const namespaces = [];\n\n                keys.forEach(key => {\n                    const parts = key.key().split('.');\n\n                    const namespace = parts[0];\n\n                    if (['core', 'validation'].indexOf(namespace) === -1 && namespaces.indexOf(namespace) === -1) {\n                        namespaces.push(namespace);\n                    }\n\n                    if (parts.length > 1 && namespace !== 'validation') {\n                        const frontend = parts[1];\n\n                        if (this.frontends.indexOf(frontend) === -1) {\n                            this.frontends.push(frontend);\n                        }\n                    }\n                });\n\n                namespaces.sort();\n\n                this.namespaces = [\n                    {\n                        namespace: 'core',\n                    },\n                    {\n                        namespace: 'validation',\n                    },\n                    ...namespaces.map(namespace => {\n                        // First we look if the namespace matches an extension ID, that's the most common naming\n                        let extension = app.data.extensions[namespace];\n\n                        // If that's unsuccessful, we'll look if the full package name was used as namespace\n                        if (!extension) {\n                            extension = Object.values(app.data.extensions).find(extension => {\n                                const packageNameWithDash = extension.name.replace('/', '-');\n\n                                return namespace === packageNameWithDash;\n                            });\n                        }\n\n                        return {\n                            namespace,\n                            extension,\n                        };\n                    }),\n                ];\n            }),\n        ]).then(() => {\n            this.ready = true;\n            m.redraw();\n        });\n    }\n\n    content() {\n        return m('.ExtensionPage-settings', m('.container', [\n            this.contentTab(),\n        ]));\n    }\n\n    infoItems() {\n        const items = super.infoItems();\n\n        items.add('linguist-tabs', m('ul.FoF-Linguist-Tabs', [\n            m('li', m('a', {\n                className: this.tab === 'strings' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'strings';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.strings'))),\n            m('li', m('a', {\n                className: this.tab === 'coverage' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'coverage';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.coverage'))),\n            m('li', m('a', {\n                className: this.tab === 'export' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'export';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.export'))),\n            m('li', m('a', {\n                className: this.tab === 'import' ? 'active' : '',\n                onclick: () => {\n                    this.tab = 'import';\n                },\n            }, app.translator.trans('fof-linguist.admin.tabs.import'))),\n        ]), 100);\n\n        return items;\n    }\n\n    contentTab() {\n        if (!this.ready) {\n            return LoadingIndicator.component();\n        }\n\n        switch (this.tab) {\n            case 'strings':\n                return m(StringsPage, {\n                    namespaces: this.namespaces,\n                    frontends: this.frontends,\n                    initialBrowseFilters: this.initialBrowseFilters,\n                });\n            case 'coverage':\n                return m(CoveragePage, {\n                    namespaces: this.namespaces,\n                    frontends: this.frontends,\n                    browseWithFilters: filters => {\n                        this.initialBrowseFilters = filters;\n                        this.tab = 'strings';\n                    },\n                });\n            case 'export':\n                return m(ExportPage, {\n                    namespaces: this.namespaces,\n                });\n            case 'import':\n                return m(ImportPage);\n        }\n\n        return null;\n    }\n}\n","import StringKey from './StringKey';\nimport StringLocale from './StringLocale';\n\nexport const components = {\n    StringKey,\n    StringLocale,\n};\n","import StringKey from './StringKey';\nimport TextString from './TextString';\n\nexport const models = {\n    StringKey,\n    TextString,\n};\n","import CoveragePage from './CoveragePage';\nimport ExportPage from './ExportPage';\nimport ImportPage from './ImportPage';\nimport LinguistPage from './LinguistPage';\nimport StringsPage from './StringsPage';\n\nexport const pages = {\n    CoveragePage,\n    ExportPage,\n    ImportPage,\n    LinguistPage,\n    StringsPage,\n};\n","import booleanCheck from './booleanCheck';\nimport frontendLabel from './frontendLabel';\nimport highlightMithril from './highlightMithril';\nimport localesAsArray from './localesAsArray';\nimport namespaceLabel from './namespaceLabel';\n\nexport const utils = {\n    booleanCheck,\n    frontendLabel,\n    highlightMithril,\n    localesAsArray,\n    namespaceLabel,\n};\n","import app from 'flarum/admin/app';\nimport StringKey from './models/StringKey';\nimport TextString from './models/TextString';\nimport LinguistPage from './pages/LinguistPage';\n\nexport * from './components';\nexport * from './models';\nexport * from './pages';\nexport * from './utils';\n\napp.initializers.add('fof-linguist', app => {\n    app.store.models['fof-linguist-string-key'] = StringKey;\n    app.store.models['fof-linguist-string'] = TextString;\n\n    app.extensionData.for('fof-linguist').registerPage(LinguistPage);\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","StringKey","Model","locales","TextString","locale","apiEndpoint","this","exists","data","id","app","push","name","string","highlight","lowercaseHighliht","toLowerCase","regex","RegExp","replace","HIGHLIGHT_DELIMITER","split","map","text","m","StringLocale","oninit","vnode","stringKey","attrs","localeKey","originalString","find","dirty","processing","originalHasNewLine","keys","some","indexOf","inputType","view","placeholderText","localeName","className","title","oninput","event","target","disabled","highlightMithril","actions","onchange","toArray","items","ItemList","add","Button","type","loading","onclick","saveString","deleteString","attributes","save","then","redraw","err","localesAsArray","namespace","frontend","operation","booleans","reduce","b","StringsPage","numberOfResultsToShow","filters","assign","search","withOwnTranslations","missingTranslationsNegation","missingTranslationsType","missingTranslationsOperation","missingTranslationsInLocales","forExtension","initialBrowseFilters","results","applyFilters","slice","Alert","dismissible","controls","LoadingModal","method","url","window","location","reload","placeholder","icon","Dropdown","buttonClassName","label","namespaces","extension","extra","namespaceLabel","frontends","frontendLabel","length","stopPropagation","Select","options","without","with","any","original","own","or","and","filter","strings","confirm","extractText","count","Promise","all","shown","total","keysWithCustomTranslations","keysWithCustomTranslationsIn","forEach","lowercaseSearch","hasOriginalTranslation","booleanCheck","hasOwnTranslation","matchesType","parts","CoveragePage","columns","showAllFrontends","totalPercent","firstNonEnglishLocale","visibleFrontends","browseWithFilters","localeCoverage","style","prefixCoverage","stringKeys","customCount","originalCount","specialStyle","percent","Math","round","translated","width","max","custom","ExportPage","includeOriginals","includeAll","output","fetchOutput","localeOptions","namespaceOptions","_all","Switch","state","LinkButton","href","exportUrl","external","download","readonly","rows","buildQueryString","extract","raw","JSON","stringify","error","ImportPage","overrideExisting","input","body","ignoreExisting","imported","ignored","identical","LinguistPage","tab","ready","result","sort","values","packageNameWithDash","content","contentTab","infoItems","LoadingIndicator","ExtensionPage","components","models","pages","utils","store","extensionData","registerPage"],"sourceRoot":""}